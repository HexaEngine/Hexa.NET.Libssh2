// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						fixed (Libssh2SftpAttributes* pattrs = &attrs)
						{
							int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr1);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						fixed (Libssh2SftpAttributes* pattrs = &attrs)
						{
							int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr1);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		internal static nint SftpWriteNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, byte*, ulong, nint>)vt[120])(handle, buffer, count);
			#else
			return (nint)((delegate* unmanaged[Cdecl]<nint, nint, ulong, nint>)vt[120])((nint)handle, (nint)buffer, count);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			nint ret = SftpWriteNative(handle, buffer, count);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, buffer, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (byte* pbuffer = &buffer)
			{
				nint ret = SftpWriteNative(handle, (byte*)pbuffer, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (byte* pbuffer = buffer)
			{
				nint ret = SftpWriteNative(handle, (byte*)pbuffer, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = SftpWriteNative(handle, pStr0, count);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, count);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = buffer)
				{
					nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, count);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] ulong count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, pStr0, count);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			nint ret = SftpWriteNative(handle, buffer, count);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] byte* buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, buffer, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (byte* pbuffer = &buffer)
			{
				nint ret = SftpWriteNative(handle, (byte*)pbuffer, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (byte* pbuffer = buffer)
			{
				nint ret = SftpWriteNative(handle, (byte*)pbuffer, count);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = SftpWriteNative(handle, pStr0, count);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ref byte buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, count);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = buffer)
				{
					nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, count);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_write")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpWrite([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "const char*")] string buffer, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "size_t")] nuint count)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = SftpWriteNative((Libssh2SftpHandle*)phandle, pStr0, count);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fsync")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpFsyncNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, int>)vt[121])(handle);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[121])((nint)handle);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fsync")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFsync([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			int ret = SftpFsyncNative(handle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fsync")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFsync([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpFsyncNative((Libssh2SftpHandle*)phandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_close_handle")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpCloseHandleNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, int>)vt[122])(handle);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[122])((nint)handle);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_close_handle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpCloseHandle([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			int ret = SftpCloseHandleNative(handle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_close_handle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpCloseHandle([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpCloseHandleNative((Libssh2SftpHandle*)phandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SftpSeekNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "size_t")] ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, ulong, void>)vt[123])(handle, offset);
			#else
			((delegate* unmanaged[Cdecl]<nint, ulong, void>)vt[123])((nint)handle, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SftpSeek([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "size_t")] ulong offset)
		{
			SftpSeekNative(handle, offset);
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SftpSeek([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "size_t")] ulong offset)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				SftpSeekNative((Libssh2SftpHandle*)phandle, offset);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SftpSeek([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "size_t")] nuint offset)
		{
			SftpSeekNative(handle, offset);
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SftpSeek([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "size_t")] nuint offset)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				SftpSeekNative((Libssh2SftpHandle*)phandle, offset);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek64")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SftpSeek64Native([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "libssh2_uint64_t")] ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, ulong, void>)vt[124])(handle, offset);
			#else
			((delegate* unmanaged[Cdecl]<nint, ulong, void>)vt[124])((nint)handle, offset);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SftpSeek64([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "libssh2_uint64_t")] ulong offset)
		{
			SftpSeek64Native(handle, offset);
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_seek64")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SftpSeek64([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "libssh2_uint64_t")] ulong offset)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				SftpSeek64Native((Libssh2SftpHandle*)phandle, offset);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_tell")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		internal static ulong SftpTellNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, ulong>)vt[125])(handle);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong>)vt[125])((nint)handle);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_tell")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong SftpTell([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			ulong ret = SftpTellNative(handle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_tell")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static ulong SftpTell([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				ulong ret = SftpTellNative((Libssh2SftpHandle*)phandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_tell64")]
		[return: NativeName(NativeNameType.Type, "libssh2_uint64_t")]
		internal static ulong SftpTell64Native([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, ulong>)vt[126])(handle);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong>)vt[126])((nint)handle);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_tell64")]
		[return: NativeName(NativeNameType.Type, "libssh2_uint64_t")]
		public static ulong SftpTell64([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle)
		{
			ulong ret = SftpTell64Native(handle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_tell64")]
		[return: NativeName(NativeNameType.Type, "libssh2_uint64_t")]
		public static ulong SftpTell64([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				ulong ret = SftpTell64Native((Libssh2SftpHandle*)phandle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpFstatExNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs, [NativeName(NativeNameType.Param, "setstat")] [NativeName(NativeNameType.Type, "int")] int setstat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, Libssh2SftpAttributes*, int, int>)vt[127])(handle, attrs, setstat);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)vt[127])((nint)handle, (nint)attrs, setstat);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs, [NativeName(NativeNameType.Param, "setstat")] [NativeName(NativeNameType.Type, "int")] int setstat)
		{
			int ret = SftpFstatExNative(handle, attrs, setstat);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs, [NativeName(NativeNameType.Param, "setstat")] [NativeName(NativeNameType.Type, "int")] int setstat)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpFstatExNative((Libssh2SftpHandle*)phandle, attrs, setstat);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs, [NativeName(NativeNameType.Param, "setstat")] [NativeName(NativeNameType.Type, "int")] int setstat)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpFstatExNative(handle, (Libssh2SftpAttributes*)pattrs, setstat);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs, [NativeName(NativeNameType.Param, "setstat")] [NativeName(NativeNameType.Type, "int")] int setstat)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpFstatExNative((Libssh2SftpHandle*)phandle, (Libssh2SftpAttributes*)pattrs, setstat);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpRenameExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, byte*, uint, int, int>)vt[128])(sftp, sourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, int, int>)vt[128])((nint)sftp, (nint)sourceFilename, srouceFilenameLen, (nint)destFilename, destFilenameLen, flags);
			#endif
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			int ret = SftpRenameExNative(sftp, sourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
			return ret;
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpRenameExNative((Libssh2Sftp*)psftp, sourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (byte* psourceFilename = &sourceFilename)
			{
				int ret = SftpRenameExNative(sftp, (byte*)psourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (byte* psourceFilename = sourceFilename)
			{
				int ret = SftpRenameExNative(sftp, (byte*)psourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] string sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpRenameExNative(sftp, pStr0, srouceFilenameLen, destFilename, destFilenameLen, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* psourceFilename = &sourceFilename)
				{
					int ret = SftpRenameExNative((Libssh2Sftp*)psftp, (byte*)psourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* psourceFilename = sourceFilename)
				{
					int ret = SftpRenameExNative((Libssh2Sftp*)psftp, (byte*)psourceFilename, srouceFilenameLen, destFilename, destFilenameLen, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] string sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sourceFilename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sourceFilename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sourceFilename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpRenameExNative((Libssh2Sftp*)psftp, pStr0, srouceFilenameLen, destFilename, destFilenameLen, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (byte* pdestFilename = &destFilename)
			{
				int ret = SftpRenameExNative(sftp, sourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (byte* pdestFilename = destFilename)
			{
				int ret = SftpRenameExNative(sftp, sourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] string destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (destFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(destFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(destFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpRenameExNative(sftp, sourceFilename, srouceFilenameLen, pStr0, destFilenameLen, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pdestFilename = &destFilename)
				{
					int ret = SftpRenameExNative((Libssh2Sftp*)psftp, sourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pdestFilename = destFilename)
				{
					int ret = SftpRenameExNative((Libssh2Sftp*)psftp, sourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] byte* sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] string destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (destFilename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(destFilename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(destFilename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpRenameExNative((Libssh2Sftp*)psftp, sourceFilename, srouceFilenameLen, pStr0, destFilenameLen, flags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (byte* psourceFilename = &sourceFilename)
			{
				fixed (byte* pdestFilename = &destFilename)
				{
					int ret = SftpRenameExNative(sftp, (byte*)psourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (byte* psourceFilename = sourceFilename)
			{
				fixed (byte* pdestFilename = destFilename)
				{
					int ret = SftpRenameExNative(sftp, (byte*)psourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] string sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] string destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (sourceFilename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(sourceFilename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(sourceFilename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (destFilename != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(destFilename);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(destFilename, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SftpRenameExNative(sftp, pStr0, srouceFilenameLen, pStr1, destFilenameLen, flags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* psourceFilename = &sourceFilename)
				{
					fixed (byte* pdestFilename = &destFilename)
					{
						int ret = SftpRenameExNative((Libssh2Sftp*)psftp, (byte*)psourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* psourceFilename = sourceFilename)
				{
					fixed (byte* pdestFilename = destFilename)
					{
						int ret = SftpRenameExNative((Libssh2Sftp*)psftp, (byte*)psourceFilename, srouceFilenameLen, (byte*)pdestFilename, destFilenameLen, flags);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Miscellaneous Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_rename_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRenameEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "source_filename")] [NativeName(NativeNameType.Type, "const char*")] string sourceFilename, [NativeName(NativeNameType.Param, "srouce_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srouceFilenameLen, [NativeName(NativeNameType.Param, "dest_filename")] [NativeName(NativeNameType.Type, "const char*")] string destFilename, [NativeName(NativeNameType.Param, "dest_filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint destFilenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (sourceFilename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(sourceFilename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(sourceFilename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (destFilename != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(destFilename);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(destFilename, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SftpRenameExNative((Libssh2Sftp*)psftp, pStr0, srouceFilenameLen, pStr1, destFilenameLen, flags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpUnlinkExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, int>)vt[129])(sftp, filename, filenameLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, int>)vt[129])((nint)sftp, (nint)filename, filenameLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			int ret = SftpUnlinkExNative(sftp, filename, filenameLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpUnlinkExNative((Libssh2Sftp*)psftp, filename, filenameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = SftpUnlinkExNative(sftp, (byte*)pfilename, filenameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = SftpUnlinkExNative(sftp, (byte*)pfilename, filenameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpUnlinkExNative(sftp, pStr0, filenameLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = &filename)
				{
					int ret = SftpUnlinkExNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = filename)
				{
					int ret = SftpUnlinkExNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_unlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpUnlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpUnlinkExNative((Libssh2Sftp*)psftp, pStr0, filenameLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstatvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpFstatvfsNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, Libssh2SftpStatvfs*, int>)vt[130])(handle, st);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[130])((nint)handle, (nint)st);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstatvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatvfs([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			int ret = SftpFstatvfsNative(handle, st);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstatvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatvfs([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpFstatvfsNative((Libssh2SftpHandle*)phandle, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstatvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatvfs([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2SftpStatvfs* pst = &st)
			{
				int ret = SftpFstatvfsNative(handle, (Libssh2SftpStatvfs*)pst);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_fstatvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpFstatvfs([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpFstatvfsNative((Libssh2SftpHandle*)phandle, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpStatvfsNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, ulong, Libssh2SftpStatvfs*, int>)vt[131])(sftp, path, pathLen, st);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, ulong, nint, int>)vt[131])((nint)sftp, (nint)path, pathLen, (nint)st);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			int ret = SftpStatvfsNative(sftp, path, pathLen, st);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, path, pathLen, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (byte* ppath = path)
			{
				int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpStatvfsNative(sftp, pStr0, pathLen, st);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, st);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, st);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, pStr0, pathLen, st);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			int ret = SftpStatvfsNative(sftp, path, pathLen, st);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, path, pathLen, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (byte* ppath = path)
			{
				int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, st);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpStatvfsNative(sftp, pStr0, pathLen, st);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, st);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, st);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] Libssh2SftpStatvfs* st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, pStr0, pathLen, st);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2SftpStatvfs* pst = &st)
			{
				int ret = SftpStatvfsNative(sftp, path, pathLen, (Libssh2SftpStatvfs*)pst);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, path, pathLen, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (byte* ppath = &path)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (byte* ppath = path)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpStatvfs* pst = &st)
			{
				int ret = SftpStatvfsNative(sftp, pStr0, pathLen, (Libssh2SftpStatvfs*)pst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					fixed (Libssh2SftpStatvfs* pst = &st)
					{
						int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					fixed (Libssh2SftpStatvfs* pst = &st)
					{
						int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, pStr0, pathLen, (Libssh2SftpStatvfs*)pst);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2SftpStatvfs* pst = &st)
			{
				int ret = SftpStatvfsNative(sftp, path, pathLen, (Libssh2SftpStatvfs*)pst);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, path, pathLen, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (byte* ppath = &path)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (byte* ppath = path)
			{
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative(sftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpStatvfs* pst = &st)
			{
				int ret = SftpStatvfsNative(sftp, pStr0, pathLen, (Libssh2SftpStatvfs*)pst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					fixed (Libssh2SftpStatvfs* pst = &st)
					{
						int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					fixed (Libssh2SftpStatvfs* pst = &st)
					{
						int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, (Libssh2SftpStatvfs*)pst);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_statvfs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatvfs([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pathLen, [NativeName(NativeNameType.Param, "st")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_STATVFS*")] ref Libssh2SftpStatvfs st)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpStatvfs* pst = &st)
				{
					int ret = SftpStatvfsNative((Libssh2Sftp*)psftp, pStr0, pathLen, (Libssh2SftpStatvfs*)pst);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpMkdirExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, int, int>)vt[132])(sftp, path, pathLen, mode);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, int, int>)vt[132])((nint)sftp, (nint)path, pathLen, mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			int ret = SftpMkdirExNative(sftp, path, pathLen, mode);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpMkdirExNative((Libssh2Sftp*)psftp, path, pathLen, mode);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SftpMkdirExNative(sftp, (byte*)ppath, pathLen, mode);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			fixed (byte* ppath = path)
			{
				int ret = SftpMkdirExNative(sftp, (byte*)ppath, pathLen, mode);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpMkdirExNative(sftp, pStr0, pathLen, mode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					int ret = SftpMkdirExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, mode);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					int ret = SftpMkdirExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, mode);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_mkdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpMkdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpMkdirExNative((Libssh2Sftp*)psftp, pStr0, pathLen, mode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpRmdirExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, int>)vt[133])(sftp, path, pathLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, int>)vt[133])((nint)sftp, (nint)path, pathLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			int ret = SftpRmdirExNative(sftp, path, pathLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpRmdirExNative((Libssh2Sftp*)psftp, path, pathLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SftpRmdirExNative(sftp, (byte*)ppath, pathLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			fixed (byte* ppath = path)
			{
				int ret = SftpRmdirExNative(sftp, (byte*)ppath, pathLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpRmdirExNative(sftp, pStr0, pathLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					int ret = SftpRmdirExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					int ret = SftpRmdirExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_rmdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpRmdirEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpRmdirExNative((Libssh2Sftp*)psftp, pStr0, pathLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpStatExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, int, Libssh2SftpAttributes*, int>)vt[134])(sftp, path, pathLen, statType, attrs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, int, nint, int>)vt[134])((nint)sftp, (nint)path, pathLen, statType, (nint)attrs);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			int ret = SftpStatExNative(sftp, path, pathLen, statType, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpStatExNative((Libssh2Sftp*)psftp, path, pathLen, statType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SftpStatExNative(sftp, (byte*)ppath, pathLen, statType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* ppath = path)
			{
				int ret = SftpStatExNative(sftp, (byte*)ppath, pathLen, statType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpStatExNative(sftp, pStr0, pathLen, statType, attrs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					int ret = SftpStatExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, statType, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					int ret = SftpStatExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, statType, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpStatExNative((Libssh2Sftp*)psftp, pStr0, pathLen, statType, attrs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpStatExNative(sftp, path, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpStatExNative((Libssh2Sftp*)psftp, path, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* ppath = &path)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpStatExNative(sftp, (byte*)ppath, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* ppath = path)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpStatExNative(sftp, (byte*)ppath, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpStatExNative(sftp, pStr0, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpStatExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpStatExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_stat_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpStatEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "stat_type")] [NativeName(NativeNameType.Type, "int")] int statType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpStatExNative((Libssh2Sftp*)psftp, pStr0, pathLen, statType, (Libssh2SftpAttributes*)pattrs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpSymlinkExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, byte*, uint, int, int>)vt[135])(sftp, path, pathLen, target, targetLen, linkType);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, int, int>)vt[135])((nint)sftp, (nint)path, pathLen, (nint)target, targetLen, linkType);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			int ret = SftpSymlinkExNative(sftp, path, pathLen, target, targetLen, linkType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, path, pathLen, target, targetLen, linkType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (byte* ppath = &path)
			{
				int ret = SftpSymlinkExNative(sftp, (byte*)ppath, pathLen, target, targetLen, linkType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (byte* ppath = path)
			{
				int ret = SftpSymlinkExNative(sftp, (byte*)ppath, pathLen, target, targetLen, linkType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpSymlinkExNative(sftp, pStr0, pathLen, target, targetLen, linkType);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, target, targetLen, linkType);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, target, targetLen, linkType);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] byte* target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, pStr0, pathLen, target, targetLen, linkType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref byte target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (byte* ptarget = &target)
			{
				int ret = SftpSymlinkExNative(sftp, path, pathLen, (byte*)ptarget, targetLen, linkType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref string target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (target != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(target);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(target, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpSymlinkExNative(sftp, path, pathLen, pStr0, targetLen, linkType);
			target = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref byte target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ptarget = &target)
				{
					int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, path, pathLen, (byte*)ptarget, targetLen, linkType);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref string target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (target != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(target);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(target, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, path, pathLen, pStr0, targetLen, linkType);
				target = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref byte target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (byte* ppath = &path)
			{
				fixed (byte* ptarget = &target)
				{
					int ret = SftpSymlinkExNative(sftp, (byte*)ppath, pathLen, (byte*)ptarget, targetLen, linkType);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref byte target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (byte* ppath = path)
			{
				fixed (byte* ptarget = &target)
				{
					int ret = SftpSymlinkExNative(sftp, (byte*)ppath, pathLen, (byte*)ptarget, targetLen, linkType);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref string target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (target != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(target);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(target, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SftpSymlinkExNative(sftp, pStr0, pathLen, pStr1, targetLen, linkType);
			target = Utils.DecodeStringUTF8(pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref byte target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = &path)
				{
					fixed (byte* ptarget = &target)
					{
						int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, (byte*)ptarget, targetLen, linkType);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref byte target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* ppath = path)
				{
					fixed (byte* ptarget = &target)
					{
						int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, (byte*)ppath, pathLen, (byte*)ptarget, targetLen, linkType);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_symlink_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpSymlinkEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "path_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint pathLen, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "char*")] ref string target, [NativeName(NativeNameType.Param, "target_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint targetLen, [NativeName(NativeNameType.Param, "link_type")] [NativeName(NativeNameType.Type, "int")] int linkType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (target != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(target);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(target, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SftpSymlinkExNative((Libssh2Sftp*)psftp, pStr0, pathLen, pStr1, targetLen, linkType);
				target = Utils.DecodeStringUTF8(pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

	}
}
