// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* phostname = &hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* phostname = hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (hostname != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, pStr0, pStr1, passphrase, pStr2, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (hostname != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, pStr1, passphrase, pStr2, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekey != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (hostname != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, pStr1, pStr2, passphrase, pStr3, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* pprivatekey = &privatekey)
						{
							fixed (byte* phostname = &hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* pprivatekey = privatekey)
						{
							fixed (byte* phostname = hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekey != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (hostname != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, pStr2, passphrase, pStr3, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppassphrase = &passphrase)
			{
				fixed (byte* phostname = &hostname)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppassphrase = passphrase)
			{
				fixed (byte* phostname = hostname)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (passphrase != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (hostname != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(hostname, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, pStr0, pStr1, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* phostname = &hostname)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* phostname = hostname)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (passphrase != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (hostname != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(hostname, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, pStr0, pStr1, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* phostname = &hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* phostname = hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (hostname != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, publickey, privatekey, pStr1, pStr2, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (hostname != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, privatekey, pStr1, pStr2, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* phostname = &hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* phostname = hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (hostname != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, pStr0, privatekey, pStr1, pStr2, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (hostname != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, privatekey, pStr1, pStr2, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (hostname != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, pStr1, privatekey, pStr2, pStr3, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							fixed (byte* phostname = &hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							fixed (byte* phostname = hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (hostname != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, privatekey, pStr2, pStr3, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pprivatekey = &privatekey)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* phostname = &hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pprivatekey = privatekey)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* phostname = hostname)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (hostname != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, pStr0, pStr1, pStr2, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (hostname != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(hostname, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, pStr0, pStr1, pStr2, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (hostname != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, publickey, pStr1, pStr2, pStr3, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							fixed (byte* phostname = &hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							fixed (byte* phostname = hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (hostname != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, pStr1, pStr2, pStr3, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* phostname = &hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* phostname = hostname)
						{
							int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (hostname != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, pStr0, pStr1, pStr2, pStr3, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							fixed (byte* phostname = &hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							fixed (byte* phostname = hostname)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (hostname != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(hostname, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, pStr1, pStr2, pStr3, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							fixed (byte* phostname = &hostname)
							{
								int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							fixed (byte* phostname = hostname)
							{
								int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekey != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (passphrase != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			byte* pStr4 = null;
			int pStrSize4 = 0;
			if (hostname != null)
			{
				pStrSize4 = Utils.GetByteCountUTF8(hostname);
				if (pStrSize4 >= Utils.MaxStackallocSize)
				{
					pStr4 = Utils.Alloc<byte>(pStrSize4 + 1);
				}
				else
				{
					byte* pStrStack4 = stackalloc byte[pStrSize4 + 1];
					pStr4 = pStrStack4;
				}
				int pStrOffset4 = Utils.EncodeStringUTF8(hostname, pStr4, pStrSize4);
				pStr4[pStrOffset4] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, pStr1, pStr2, pStr3, pStr4, hostnameLen, localUsername, localUsernameLen);
			if (pStrSize4 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr4);
			}
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ref byte hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* pprivatekey = &privatekey)
						{
							fixed (byte* ppassphrase = &passphrase)
							{
								fixed (byte* phostname = &hostname)
								{
									int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* pprivatekey = privatekey)
						{
							fixed (byte* ppassphrase = passphrase)
							{
								fixed (byte* phostname = hostname)
								{
									int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, (byte*)ppassphrase, (byte*)phostname, hostnameLen, localUsername, localUsernameLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] string hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] byte* localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekey != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (passphrase != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				byte* pStr4 = null;
				int pStrSize4 = 0;
				if (hostname != null)
				{
					pStrSize4 = Utils.GetByteCountUTF8(hostname);
					if (pStrSize4 >= Utils.MaxStackallocSize)
					{
						pStr4 = Utils.Alloc<byte>(pStrSize4 + 1);
					}
					else
					{
						byte* pStrStack4 = stackalloc byte[pStrSize4 + 1];
						pStr4 = pStrStack4;
					}
					int pStrOffset4 = Utils.EncodeStringUTF8(hostname, pStr4, pStrSize4);
					pStr4[pStrOffset4] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, pStr2, pStr3, pStr4, hostnameLen, localUsername, localUsernameLen);
				if (pStrSize4 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr4);
				}
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* plocalUsername = &localUsername)
			{
				int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* plocalUsername = localUsername)
			{
				int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (localUsername != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(localUsername, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, pStr0, localUsernameLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* plocalUsername = &localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* plocalUsername = localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (localUsername != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(localUsername, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, pStr0, localUsernameLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* plocalUsername = &localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* plocalUsername = localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (localUsername != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, pStr1, localUsernameLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (localUsername != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, privatekey, passphrase, hostname, hostnameLen, pStr1, localUsernameLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* plocalUsername = &localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* plocalUsername = localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (localUsername != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, pStr0, privatekey, passphrase, hostname, hostnameLen, pStr1, localUsernameLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (localUsername != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, privatekey, passphrase, hostname, hostnameLen, pStr1, localUsernameLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (localUsername != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, pStr1, privatekey, passphrase, hostname, hostnameLen, pStr2, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (localUsername != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, privatekey, passphrase, hostname, hostnameLen, pStr2, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pprivatekey = &privatekey)
			{
				fixed (byte* plocalUsername = &localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pprivatekey = privatekey)
			{
				fixed (byte* plocalUsername = localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (localUsername != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, pStr0, passphrase, hostname, hostnameLen, pStr1, localUsernameLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (localUsername != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, pStr0, passphrase, hostname, hostnameLen, pStr1, localUsernameLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (localUsername != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, publickey, pStr1, passphrase, hostname, hostnameLen, pStr2, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (localUsername != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, pStr1, passphrase, hostname, hostnameLen, pStr2, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (localUsername != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, pStr0, pStr1, passphrase, hostname, hostnameLen, pStr2, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (localUsername != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, pStr1, passphrase, hostname, hostnameLen, pStr2, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekey != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (localUsername != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(localUsername, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, pStr1, pStr2, passphrase, hostname, hostnameLen, pStr3, localUsernameLen);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* pprivatekey = &privatekey)
						{
							fixed (byte* plocalUsername = &localUsername)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* pprivatekey = privatekey)
						{
							fixed (byte* plocalUsername = localUsername)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekey != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (localUsername != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(localUsername, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, pStr2, passphrase, hostname, hostnameLen, pStr3, localUsernameLen);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppassphrase = &passphrase)
			{
				fixed (byte* plocalUsername = &localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppassphrase = passphrase)
			{
				fixed (byte* plocalUsername = localUsername)
				{
					int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (passphrase != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (localUsername != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, privatekey, pStr0, hostname, hostnameLen, pStr1, localUsernameLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (passphrase != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (localUsername != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(localUsername, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, pStr0, hostname, hostnameLen, pStr1, localUsernameLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (localUsername != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, publickey, privatekey, pStr1, hostname, hostnameLen, pStr2, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (localUsername != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, privatekey, pStr1, hostname, hostnameLen, pStr2, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (localUsername != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, pStr0, privatekey, pStr1, hostname, hostnameLen, pStr2, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (localUsername != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, privatekey, pStr1, hostname, hostnameLen, pStr2, localUsernameLen);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (localUsername != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(localUsername, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, pStr0, usernameLen, pStr1, privatekey, pStr2, hostname, hostnameLen, pStr3, localUsernameLen);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							fixed (byte* plocalUsername = &localUsername)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							fixed (byte* plocalUsername = localUsername)
							{
								int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (localUsername != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(localUsername);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(localUsername, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, privatekey, pStr2, hostname, hostnameLen, pStr3, localUsernameLen);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pprivatekey = &privatekey)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					fixed (byte* plocalUsername = &localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (byte* pprivatekey = privatekey)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					fixed (byte* plocalUsername = localUsername)
					{
						int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] string localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (localUsername != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(localUsername);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(localUsername, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthHostbasedFromfileExNative(session, username, usernameLen, publickey, pStr0, pStr1, hostname, hostnameLen, pStr2, localUsernameLen);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ref byte localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						fixed (byte* plocalUsername = &localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_hostbased_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthHostbasedFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase, [NativeName(NativeNameType.Param, "hostname")] [NativeName(NativeNameType.Type, "const char*")] byte* hostname, [NativeName(NativeNameType.Param, "hostname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint hostnameLen, [NativeName(NativeNameType.Param, "local_username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> localUsername, [NativeName(NativeNameType.Param, "local_username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint localUsernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						fixed (byte* plocalUsername = localUsername)
						{
							int ret = UserauthHostbasedFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase, hostname, hostnameLen, (byte*)plocalUsername, localUsernameLen);
							return ret;
						}
					}
				}
			}
		}
	}
}
