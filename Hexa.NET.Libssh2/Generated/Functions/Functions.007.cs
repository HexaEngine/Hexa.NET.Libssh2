// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppassphrase = &passphrase)
			{
				int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppassphrase = passphrase)
			{
				int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (passphrase != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (passphrase != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppassphrase = &passphrase)
			{
				int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppassphrase = passphrase)
			{
				int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (passphrase != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (passphrase != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppassphrase = &passphrase)
			{
				int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppassphrase = passphrase)
			{
				int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (passphrase != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (passphrase != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, privatekeyfiledata, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (passphrase != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
						{
							fixed (byte* ppassphrase = &passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
						{
							fixed (byte* ppassphrase = passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (passphrase != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (passphrase != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
						{
							fixed (byte* ppassphrase = &passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
						{
							fixed (byte* ppassphrase = passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (passphrase != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr0, privatekeyfiledataLen, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] byte* publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, publickeyfiledata, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}
	}
}
