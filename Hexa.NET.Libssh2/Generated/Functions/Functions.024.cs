// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								fixed (byte* pmethod = &method)
								{
									int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								fixed (byte* pmethod = method)
								{
									int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								byte* pStr0 = null;
								int pStrSize0 = 0;
								if (method != null)
								{
									pStrSize0 = Utils.GetByteCountUTF8(method);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
									}
									else
									{
										byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
										pStr0 = pStrStack0;
									}
									int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
									pStr0[pStrOffset0] = 0;
								}
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pmethod = &method)
			{
				int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pmethod = method)
			{
				int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (method != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(method);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, pStr0, methodLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				fixed (byte* pmethod = &method)
				{
					int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				fixed (byte* pmethod = method)
				{
					int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (method != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(method);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = &method)
					{
						int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					fixed (byte* pmethod = method)
					{
						int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (method != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(method);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}
	}
}
