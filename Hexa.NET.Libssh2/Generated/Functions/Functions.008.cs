// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (passphrase != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
						{
							fixed (byte* ppassphrase = &passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
						{
							fixed (byte* ppassphrase = passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (passphrase != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickeyfiledata = &publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickeyfiledata = publickeyfiledata)
			{
				fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickeyfiledata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, username, usernameLen, pStr0, publickeyfiledataLen, pStr1, privatekeyfiledataLen, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickeyfiledata = &publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickeyfiledata = publickeyfiledata)
				{
					fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFrommemoryNative(session, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickeyfiledata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekeyfiledata != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte* pStr3 = null;
			int pStrSize3 = 0;
			if (passphrase != null)
			{
				pStrSize3 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
				}
				else
				{
					byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
					pStr3 = pStrStack3;
				}
				int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
				pStr3[pStrOffset3] = 0;
			}
			int ret = UserauthPublickeyFrommemoryNative(session, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
			if (pStrSize3 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr3);
			}
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickeyfiledata = &publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = &privatekeyfiledata)
						{
							fixed (byte* ppassphrase = &passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickeyfiledata = publickeyfiledata)
					{
						fixed (byte* pprivatekeyfiledata = privatekeyfiledata)
						{
							fixed (byte* ppassphrase = passphrase)
							{
								int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickeyfiledata, publickeyfiledataLen, (byte*)pprivatekeyfiledata, privatekeyfiledataLen, (byte*)ppassphrase);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_frommemory")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFrommemory([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "publickeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string publickeyfiledata, [NativeName(NativeNameType.Param, "publickeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint publickeyfiledataLen, [NativeName(NativeNameType.Param, "privatekeyfiledata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeyfiledata, [NativeName(NativeNameType.Param, "privatekeyfiledata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeyfiledataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickeyfiledata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickeyfiledata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickeyfiledata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekeyfiledata != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekeyfiledata);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekeyfiledata, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				byte* pStr3 = null;
				int pStrSize3 = 0;
				if (passphrase != null)
				{
					pStrSize3 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize3 >= Utils.MaxStackallocSize)
					{
						pStr3 = Utils.Alloc<byte>(pStrSize3 + 1);
					}
					else
					{
						byte* pStrStack3 = stackalloc byte[pStrSize3 + 1];
						pStr3 = pStrStack3;
					}
					int pStrOffset3 = Utils.EncodeStringUTF8(passphrase, pStr3, pStrSize3);
					pStr3[pStrOffset3] = 0;
				}
				int ret = UserauthPublickeyFrommemoryNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, publickeyfiledataLen, pStr2, privatekeyfiledataLen, pStr3);
				if (pStrSize3 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr3);
				}
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int UserauthKeyboardInteractiveExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, uint, delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void>, int>)vt[32])(session, username, usernameLen, responseCallback);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, int>)vt[32])((nint)session, (nint)username, usernameLen, (nint)responseCallback);
			#endif
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			int ret = UserauthKeyboardInteractiveExNative(session, username, usernameLen, responseCallback);
			return ret;
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthKeyboardInteractiveExNative((Libssh2Session*)psession, username, usernameLen, responseCallback);
				return ret;
			}
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthKeyboardInteractiveExNative(session, (byte*)pusername, usernameLen, responseCallback);
				return ret;
			}
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthKeyboardInteractiveExNative(session, (byte*)pusername, usernameLen, responseCallback);
				return ret;
			}
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthKeyboardInteractiveExNative(session, pStr0, usernameLen, responseCallback);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthKeyboardInteractiveExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, responseCallback);
					return ret;
				}
			}
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthKeyboardInteractiveExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, responseCallback);
					return ret;
				}
			}
		}

		/// <summary>
		/// response_callback is provided with filled by library prompts array,<br/>
		/// but client must allocate and fill individual responses. Responses<br/>
		/// array is already allocated. Responses data will be freed by libssh2<br/>
		/// after callback return, but before subsequent callback invocation.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_keyboard_interactive_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthKeyboardInteractiveEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "response_callback")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, void (*)(const char* name, int name_len, const char* instruction, int instruction_len, int num_prompts, const LIBSSH2_USERAUTH_KBDINT_PROMPT* prompts, LIBSSH2_USERAUTH_KBDINT_RESPONSE* responses, void** abstract)* response_callback)*")] delegate*<Libssh2Session*, byte*, uint, delegate*<byte*, int, byte*, int, int, Libssh2UserauthKbdintPrompt*, Libssh2UserauthKbdintResponse*, void**, void>, void> responseCallback)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthKeyboardInteractiveExNative((Libssh2Session*)psession, pStr0, usernameLen, responseCallback);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int UserauthPublickeySkNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int>, void**, int>)vt[33])(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, ulong, nint, ulong, nint, ulong, nint, nint, nint, int>)vt[33])((nint)session, (nint)username, usernameLen, (nint)pubkeydata, pubkeydataLen, (nint)privatekeydata, privatekeydataLen, (nint)passphrase, (nint)signCallback, (nint)@abstract);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = &privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeydata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeydata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = &privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeydata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeydata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (privatekeydata != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = &privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (privatekeydata != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (privatekeydata != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = &privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (privatekeydata != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = &privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeydata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeydata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = &privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pprivatekeydata = privatekeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekeydata != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekeydata != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (privatekeydata != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = &privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (privatekeydata != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = &privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				fixed (byte* pprivatekeydata = privatekeydata)
				{
					int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekeydata != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (privatekeydata != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(privatekeydata, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr0, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = &privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					fixed (byte* pprivatekeydata = privatekeydata)
					{
						int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekeydata != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = &privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						fixed (byte* pprivatekeydata = privatekeydata)
						{
							int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, (byte*)pprivatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] string privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					byte* pStr1 = null;
					int pStrSize1 = 0;
					if (privatekeydata != null)
					{
						pStrSize1 = Utils.GetByteCountUTF8(privatekeydata);
						if (pStrSize1 >= Utils.MaxStackallocSize)
						{
							pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
						}
						else
						{
							byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
							pStr1 = pStrStack1;
						}
						int pStrOffset1 = Utils.EncodeStringUTF8(privatekeydata, pStr1, pStrSize1);
						pStr1[pStrOffset1] = 0;
					}
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, pStr1, privatekeydataLen, passphrase, signCallback, @abstract);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = UserauthPublickeySkNative(session, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] nuint usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeySkNative((Libssh2Session*)psession, pStr0, usernameLen, pubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppubkeydata = &pubkeydata)
				{
					int ret = UserauthPublickeySkNative(session, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* ppubkeydata = &pubkeydata)
			{
				int ret = UserauthPublickeySkNative(session, pStr0, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeySk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "size_t")] ulong usernameLen, [NativeName(NativeNameType.Param, "pubkeydata")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte pubkeydata, [NativeName(NativeNameType.Param, "pubkeydata_len")] [NativeName(NativeNameType.Type, "size_t")] ulong pubkeydataLen, [NativeName(NativeNameType.Param, "privatekeydata")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekeydata, [NativeName(NativeNameType.Param, "privatekeydata_len")] [NativeName(NativeNameType.Type, "size_t")] nuint privatekeydataLen, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase, [NativeName(NativeNameType.Param, "sign_callback")] [NativeName(NativeNameType.Type, "int (*)(LIBSSH2_SESSION* session, const char* username, size_t username_len, const unsigned char* pubkeydata, size_t pubkeydata_len, const char* privatekeydata, size_t privatekeydata_len, const char* passphrase, int (*)(LIBSSH2_SESSION* session, LIBSSH2_SK_SIG_INFO* sig_info, const unsigned char* data, size_t data_len, int algorithm, uint8_t flags, const char* application, const unsigned char* key_handle, size_t handle_len, void** abstract)* sign_callback, void** abstract)*")] delegate*<Libssh2Session*, byte*, ulong, byte*, ulong, byte*, ulong, byte*, delegate*<Libssh2Session*, Libssh2SkSigInfo*, byte*, ulong, int, byte, byte*, byte*, ulong, void**, int>, void**, int> signCallback, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppubkeydata = &pubkeydata)
					{
						int ret = UserauthPublickeySkNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppubkeydata, pubkeydataLen, privatekeydata, privatekeydataLen, passphrase, signCallback, @abstract);
						return ret;
					}
				}
			}
		}
	}
}
