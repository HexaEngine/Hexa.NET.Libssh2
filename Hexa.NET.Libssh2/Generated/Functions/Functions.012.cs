// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_tcpip_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectTcpipEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ref byte shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pshost = &shost)
					{
						Libssh2Channel* ret = ChannelDirectTcpipExNative((Libssh2Session*)psession, (byte*)phost, port, (byte*)pshost, sport);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_tcpip_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectTcpipEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pshost = shost)
					{
						Libssh2Channel* ret = ChannelDirectTcpipExNative((Libssh2Session*)psession, (byte*)phost, port, (byte*)pshost, sport);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_tcpip_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectTcpipEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] string shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (shost != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(shost);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(shost, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				Libssh2Channel* ret = ChannelDirectTcpipExNative((Libssh2Session*)psession, pStr0, port, pStr1, sport);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* ChannelDirectStreamlocalExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, byte*, int, Libssh2Channel*>)vt[37])(session, socketPath, shost, sport);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, nint>)vt[37])((nint)session, (nint)socketPath, (nint)shost, sport);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, socketPath, shost, sport);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, socketPath, shost, sport);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ref byte socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (byte* psocketPath = &socketPath)
			{
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, (byte*)psocketPath, shost, sport);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (byte* psocketPath = socketPath)
			{
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, (byte*)psocketPath, shost, sport);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] string socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (socketPath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(socketPath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(socketPath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, pStr0, shost, sport);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ref byte socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* psocketPath = &socketPath)
				{
					Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, (byte*)psocketPath, shost, sport);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* psocketPath = socketPath)
				{
					Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, (byte*)psocketPath, shost, sport);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] string socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] byte* shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (socketPath != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(socketPath);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(socketPath, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, pStr0, shost, sport);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ref byte shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (byte* pshost = &shost)
			{
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, socketPath, (byte*)pshost, sport);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (byte* pshost = shost)
			{
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, socketPath, (byte*)pshost, sport);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] string shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (shost != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(shost);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(shost, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, socketPath, pStr0, sport);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ref byte shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pshost = &shost)
				{
					Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, socketPath, (byte*)pshost, sport);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pshost = shost)
				{
					Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, socketPath, (byte*)pshost, sport);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] byte* socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] string shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (shost != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(shost);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(shost, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, socketPath, pStr0, sport);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ref byte socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ref byte shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (byte* psocketPath = &socketPath)
			{
				fixed (byte* pshost = &shost)
				{
					Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, (byte*)psocketPath, (byte*)pshost, sport);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (byte* psocketPath = socketPath)
			{
				fixed (byte* pshost = shost)
				{
					Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, (byte*)psocketPath, (byte*)pshost, sport);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] string socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] string shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (socketPath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(socketPath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(socketPath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (shost != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(shost);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(shost, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			Libssh2Channel* ret = ChannelDirectStreamlocalExNative(session, pStr0, pStr1, sport);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ref byte socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ref byte shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* psocketPath = &socketPath)
				{
					fixed (byte* pshost = &shost)
					{
						Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, (byte*)psocketPath, (byte*)pshost, sport);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* psocketPath = socketPath)
				{
					fixed (byte* pshost = shost)
					{
						Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, (byte*)psocketPath, (byte*)pshost, sport);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_direct_streamlocal_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelDirectStreamlocalEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "socket_path")] [NativeName(NativeNameType.Type, "const char*")] string socketPath, [NativeName(NativeNameType.Param, "shost")] [NativeName(NativeNameType.Type, "const char*")] string shost, [NativeName(NativeNameType.Param, "sport")] [NativeName(NativeNameType.Type, "int")] int sport)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (socketPath != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(socketPath);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(socketPath, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (shost != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(shost);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(shost, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				Libssh2Channel* ret = ChannelDirectStreamlocalExNative((Libssh2Session*)psession, pStr0, pStr1, sport);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		internal static Libssh2Listener* ChannelForwardListenExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, int, int*, int, Libssh2Listener*>)vt[38])(session, host, port, boundPort, queueMaxsize);
			#else
			return (Libssh2Listener*)((delegate* unmanaged[Cdecl]<nint, nint, int, nint, int, nint>)vt[38])((nint)session, (nint)host, port, (nint)boundPort, queueMaxsize);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			Libssh2Listener* ret = ChannelForwardListenExNative(session, host, port, boundPort, queueMaxsize);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, host, port, boundPort, queueMaxsize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (byte* phost = &host)
			{
				Libssh2Listener* ret = ChannelForwardListenExNative(session, (byte*)phost, port, boundPort, queueMaxsize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (byte* phost = host)
			{
				Libssh2Listener* ret = ChannelForwardListenExNative(session, (byte*)phost, port, boundPort, queueMaxsize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Listener* ret = ChannelForwardListenExNative(session, pStr0, port, boundPort, queueMaxsize);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* phost = &host)
				{
					Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, (byte*)phost, port, boundPort, queueMaxsize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* phost = host)
				{
					Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, (byte*)phost, port, boundPort, queueMaxsize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] int* boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, pStr0, port, boundPort, queueMaxsize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (int* pboundPort = &boundPort)
			{
				Libssh2Listener* ret = ChannelForwardListenExNative(session, host, port, (int*)pboundPort, queueMaxsize);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (int* pboundPort = &boundPort)
				{
					Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, host, port, (int*)pboundPort, queueMaxsize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (byte* phost = &host)
			{
				fixed (int* pboundPort = &boundPort)
				{
					Libssh2Listener* ret = ChannelForwardListenExNative(session, (byte*)phost, port, (int*)pboundPort, queueMaxsize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (byte* phost = host)
			{
				fixed (int* pboundPort = &boundPort)
				{
					Libssh2Listener* ret = ChannelForwardListenExNative(session, (byte*)phost, port, (int*)pboundPort, queueMaxsize);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pboundPort = &boundPort)
			{
				Libssh2Listener* ret = ChannelForwardListenExNative(session, pStr0, port, (int*)pboundPort, queueMaxsize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* phost = &host)
				{
					fixed (int* pboundPort = &boundPort)
					{
						Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, (byte*)phost, port, (int*)pboundPort, queueMaxsize);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* phost = host)
				{
					fixed (int* pboundPort = &boundPort)
					{
						Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, (byte*)phost, port, (int*)pboundPort, queueMaxsize);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_listen_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")]
		public static Libssh2Listener* ChannelForwardListenEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "bound_port")] [NativeName(NativeNameType.Type, "int*")] ref int boundPort, [NativeName(NativeNameType.Param, "queue_maxsize")] [NativeName(NativeNameType.Type, "int")] int queueMaxsize)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (int* pboundPort = &boundPort)
				{
					Libssh2Listener* ret = ChannelForwardListenExNative((Libssh2Session*)psession, pStr0, port, (int*)pboundPort, queueMaxsize);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_cancel")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelForwardCancelNative([NativeName(NativeNameType.Param, "listener")] [NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")] Libssh2Listener* listener)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Listener*, int>)vt[39])(listener);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[39])((nint)listener);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_cancel")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelForwardCancel([NativeName(NativeNameType.Param, "listener")] [NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")] Libssh2Listener* listener)
		{
			int ret = ChannelForwardCancelNative(listener);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_cancel")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelForwardCancel([NativeName(NativeNameType.Param, "listener")] [NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")] ref Libssh2Listener listener)
		{
			fixed (Libssh2Listener* plistener = &listener)
			{
				int ret = ChannelForwardCancelNative((Libssh2Listener*)plistener);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_accept")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* ChannelForwardAcceptNative([NativeName(NativeNameType.Param, "listener")] [NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")] Libssh2Listener* listener)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Listener*, Libssh2Channel*>)vt[40])(listener);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[40])((nint)listener);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_accept")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelForwardAccept([NativeName(NativeNameType.Param, "listener")] [NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")] Libssh2Listener* listener)
		{
			Libssh2Channel* ret = ChannelForwardAcceptNative(listener);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_forward_accept")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ChannelForwardAccept([NativeName(NativeNameType.Param, "listener")] [NativeName(NativeNameType.Type, "LIBSSH2_LISTENER*")] ref Libssh2Listener listener)
		{
			fixed (Libssh2Listener* plistener = &listener)
			{
				Libssh2Channel* ret = ChannelForwardAcceptNative((Libssh2Listener*)plistener);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelSetenvExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, byte*, uint, byte*, uint, int>)vt[41])(channel, varname, varnameLen, value, valueLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, int>)vt[41])((nint)channel, (nint)varname, varnameLen, (nint)value, valueLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			int ret = ChannelSetenvExNative(channel, varname, varnameLen, value, valueLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, varname, varnameLen, value, valueLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ref byte varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (byte* pvarname = &varname)
			{
				int ret = ChannelSetenvExNative(channel, (byte*)pvarname, varnameLen, value, valueLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (byte* pvarname = varname)
			{
				int ret = ChannelSetenvExNative(channel, (byte*)pvarname, varnameLen, value, valueLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] string varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (varname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(varname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(varname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelSetenvExNative(channel, pStr0, varnameLen, value, valueLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ref byte varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pvarname = &varname)
				{
					int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, (byte*)pvarname, varnameLen, value, valueLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pvarname = varname)
				{
					int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, (byte*)pvarname, varnameLen, value, valueLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] string varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] byte* value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (varname != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(varname);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(varname, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, pStr0, varnameLen, value, valueLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ref byte value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (byte* pvalue = &value)
			{
				int ret = ChannelSetenvExNative(channel, varname, varnameLen, (byte*)pvalue, valueLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (byte* pvalue = value)
			{
				int ret = ChannelSetenvExNative(channel, varname, varnameLen, (byte*)pvalue, valueLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] string value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelSetenvExNative(channel, varname, varnameLen, pStr0, valueLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ref byte value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pvalue = &value)
				{
					int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, varname, varnameLen, (byte*)pvalue, valueLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pvalue = value)
				{
					int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, varname, varnameLen, (byte*)pvalue, valueLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] byte* varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] string value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (value != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(value);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, varname, varnameLen, pStr0, valueLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ref byte varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ref byte value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (byte* pvarname = &varname)
			{
				fixed (byte* pvalue = &value)
				{
					int ret = ChannelSetenvExNative(channel, (byte*)pvarname, varnameLen, (byte*)pvalue, valueLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (byte* pvarname = varname)
			{
				fixed (byte* pvalue = value)
				{
					int ret = ChannelSetenvExNative(channel, (byte*)pvarname, varnameLen, (byte*)pvalue, valueLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] string varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] string value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (varname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(varname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(varname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ChannelSetenvExNative(channel, pStr0, varnameLen, pStr1, valueLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ref byte varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ref byte value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pvarname = &varname)
				{
					fixed (byte* pvalue = &value)
					{
						int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, (byte*)pvarname, varnameLen, (byte*)pvalue, valueLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pvarname = varname)
				{
					fixed (byte* pvalue = value)
					{
						int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, (byte*)pvarname, varnameLen, (byte*)pvalue, valueLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_setenv_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSetenvEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "varname")] [NativeName(NativeNameType.Type, "const char*")] string varname, [NativeName(NativeNameType.Param, "varname_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint varnameLen, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "const char*")] string value, [NativeName(NativeNameType.Param, "value_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint valueLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (varname != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(varname);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(varname, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (value != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(value);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ChannelSetenvExNative((Libssh2Channel*)pchannel, pStr0, varnameLen, pStr1, valueLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_auth_agent")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelRequestAuthAgentNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[42])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[42])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_auth_agent")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestAuthAgent([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelRequestAuthAgentNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_auth_agent")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestAuthAgent([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelRequestAuthAgentNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelRequestPtyExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, byte*, uint, byte*, uint, int, int, int, int, int>)vt[43])(channel, term, termLen, modes, modesLen, width, height, widthPx, heightPx);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, int, int, int, int, int>)vt[43])((nint)channel, (nint)term, termLen, (nint)modes, modesLen, width, height, widthPx, heightPx);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			int ret = ChannelRequestPtyExNative(channel, term, termLen, modes, modesLen, width, height, widthPx, heightPx);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, term, termLen, modes, modesLen, width, height, widthPx, heightPx);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ref byte term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (byte* pterm = &term)
			{
				int ret = ChannelRequestPtyExNative(channel, (byte*)pterm, termLen, modes, modesLen, width, height, widthPx, heightPx);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (byte* pterm = term)
			{
				int ret = ChannelRequestPtyExNative(channel, (byte*)pterm, termLen, modes, modesLen, width, height, widthPx, heightPx);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] string term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (term != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(term);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(term, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelRequestPtyExNative(channel, pStr0, termLen, modes, modesLen, width, height, widthPx, heightPx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ref byte term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pterm = &term)
				{
					int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, (byte*)pterm, termLen, modes, modesLen, width, height, widthPx, heightPx);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pterm = term)
				{
					int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, (byte*)pterm, termLen, modes, modesLen, width, height, widthPx, heightPx);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] string term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] byte* modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (term != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(term);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(term, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, pStr0, termLen, modes, modesLen, width, height, widthPx, heightPx);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ref byte modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (byte* pmodes = &modes)
			{
				int ret = ChannelRequestPtyExNative(channel, term, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (byte* pmodes = modes)
			{
				int ret = ChannelRequestPtyExNative(channel, term, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] string modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (modes != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(modes);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(modes, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelRequestPtyExNative(channel, term, termLen, pStr0, modesLen, width, height, widthPx, heightPx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ref byte modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pmodes = &modes)
				{
					int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, term, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pmodes = modes)
				{
					int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, term, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] byte* term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] string modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (modes != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(modes);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(modes, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, term, termLen, pStr0, modesLen, width, height, widthPx, heightPx);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ref byte term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ref byte modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (byte* pterm = &term)
			{
				fixed (byte* pmodes = &modes)
				{
					int ret = ChannelRequestPtyExNative(channel, (byte*)pterm, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (byte* pterm = term)
			{
				fixed (byte* pmodes = modes)
				{
					int ret = ChannelRequestPtyExNative(channel, (byte*)pterm, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] string term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] string modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (term != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(term);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(term, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (modes != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(modes);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(modes, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ChannelRequestPtyExNative(channel, pStr0, termLen, pStr1, modesLen, width, height, widthPx, heightPx);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ref byte term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ref byte modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pterm = &term)
				{
					fixed (byte* pmodes = &modes)
					{
						int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, (byte*)pterm, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pterm = term)
				{
					fixed (byte* pmodes = modes)
					{
						int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, (byte*)pterm, termLen, (byte*)pmodes, modesLen, width, height, widthPx, heightPx);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtyEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "term")] [NativeName(NativeNameType.Type, "const char*")] string term, [NativeName(NativeNameType.Param, "term_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint termLen, [NativeName(NativeNameType.Param, "modes")] [NativeName(NativeNameType.Type, "const char*")] string modes, [NativeName(NativeNameType.Param, "modes_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint modesLen, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (term != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(term);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(term, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (modes != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(modes);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(modes, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ChannelRequestPtyExNative((Libssh2Channel*)pchannel, pStr0, termLen, pStr1, modesLen, width, height, widthPx, heightPx);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_size_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelRequestPtySizeExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, int, int, int, int>)vt[44])(channel, width, height, widthPx, heightPx);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, int>)vt[44])((nint)channel, width, height, widthPx, heightPx);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_size_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtySizeEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			int ret = ChannelRequestPtySizeExNative(channel, width, height, widthPx, heightPx);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_request_pty_size_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelRequestPtySizeEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "int")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "int")] int height, [NativeName(NativeNameType.Param, "width_px")] [NativeName(NativeNameType.Type, "int")] int widthPx, [NativeName(NativeNameType.Param, "height_px")] [NativeName(NativeNameType.Type, "int")] int heightPx)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelRequestPtySizeExNative((Libssh2Channel*)pchannel, width, height, widthPx, heightPx);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelX11ReqExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, byte*, byte*, int, int>)vt[45])(channel, singleConnection, authProto, authCookie, screenNumber);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int, int>)vt[45])((nint)channel, singleConnection, (nint)authProto, (nint)authCookie, screenNumber);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			int ret = ChannelX11ReqExNative(channel, singleConnection, authProto, authCookie, screenNumber);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, authProto, authCookie, screenNumber);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ref byte authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (byte* pauthProto = &authProto)
			{
				int ret = ChannelX11ReqExNative(channel, singleConnection, (byte*)pauthProto, authCookie, screenNumber);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (byte* pauthProto = authProto)
			{
				int ret = ChannelX11ReqExNative(channel, singleConnection, (byte*)pauthProto, authCookie, screenNumber);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] string authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (authProto != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(authProto);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(authProto, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelX11ReqExNative(channel, singleConnection, pStr0, authCookie, screenNumber);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ref byte authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pauthProto = &authProto)
				{
					int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, (byte*)pauthProto, authCookie, screenNumber);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pauthProto = authProto)
				{
					int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, (byte*)pauthProto, authCookie, screenNumber);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] string authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] byte* authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (authProto != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(authProto);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(authProto, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, pStr0, authCookie, screenNumber);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ref byte authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (byte* pauthCookie = &authCookie)
			{
				int ret = ChannelX11ReqExNative(channel, singleConnection, authProto, (byte*)pauthCookie, screenNumber);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (byte* pauthCookie = authCookie)
			{
				int ret = ChannelX11ReqExNative(channel, singleConnection, authProto, (byte*)pauthCookie, screenNumber);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] string authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (authCookie != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(authCookie);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(authCookie, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelX11ReqExNative(channel, singleConnection, authProto, pStr0, screenNumber);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ref byte authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pauthCookie = &authCookie)
				{
					int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, authProto, (byte*)pauthCookie, screenNumber);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pauthCookie = authCookie)
				{
					int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, authProto, (byte*)pauthCookie, screenNumber);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] byte* authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] string authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (authCookie != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(authCookie);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(authCookie, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, authProto, pStr0, screenNumber);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ref byte authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ref byte authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (byte* pauthProto = &authProto)
			{
				fixed (byte* pauthCookie = &authCookie)
				{
					int ret = ChannelX11ReqExNative(channel, singleConnection, (byte*)pauthProto, (byte*)pauthCookie, screenNumber);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (byte* pauthProto = authProto)
			{
				fixed (byte* pauthCookie = authCookie)
				{
					int ret = ChannelX11ReqExNative(channel, singleConnection, (byte*)pauthProto, (byte*)pauthCookie, screenNumber);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] string authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] string authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (authProto != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(authProto);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(authProto, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (authCookie != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(authCookie);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(authCookie, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ChannelX11ReqExNative(channel, singleConnection, pStr0, pStr1, screenNumber);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ref byte authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ref byte authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pauthProto = &authProto)
				{
					fixed (byte* pauthCookie = &authCookie)
					{
						int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, (byte*)pauthProto, (byte*)pauthCookie, screenNumber);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pauthProto = authProto)
				{
					fixed (byte* pauthCookie = authCookie)
					{
						int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, (byte*)pauthProto, (byte*)pauthCookie, screenNumber);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_x11_req_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelX11ReqEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "single_connection")] [NativeName(NativeNameType.Type, "int")] int singleConnection, [NativeName(NativeNameType.Param, "auth_proto")] [NativeName(NativeNameType.Type, "const char*")] string authProto, [NativeName(NativeNameType.Param, "auth_cookie")] [NativeName(NativeNameType.Type, "const char*")] string authCookie, [NativeName(NativeNameType.Param, "screen_number")] [NativeName(NativeNameType.Type, "int")] int screenNumber)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (authProto != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(authProto);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(authProto, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (authCookie != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(authCookie);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(authCookie, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ChannelX11ReqExNative((Libssh2Channel*)pchannel, singleConnection, pStr0, pStr1, screenNumber);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelSignalExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] byte* signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, byte*, ulong, int>)vt[46])(channel, signame, signameLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, ulong, int>)vt[46])((nint)channel, (nint)signame, signameLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] byte* signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			int ret = ChannelSignalExNative(channel, signame, signameLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] byte* signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, signame, signameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ref byte signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			fixed (byte* psigname = &signame)
			{
				int ret = ChannelSignalExNative(channel, (byte*)psigname, signameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			fixed (byte* psigname = signame)
			{
				int ret = ChannelSignalExNative(channel, (byte*)psigname, signameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] string signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (signame != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(signame);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(signame, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelSignalExNative(channel, pStr0, signameLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ref byte signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* psigname = &signame)
				{
					int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, (byte*)psigname, signameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* psigname = signame)
				{
					int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, (byte*)psigname, signameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] string signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] ulong signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (signame != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(signame);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(signame, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, pStr0, signameLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] byte* signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			int ret = ChannelSignalExNative(channel, signame, signameLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] byte* signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, signame, signameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ref byte signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			fixed (byte* psigname = &signame)
			{
				int ret = ChannelSignalExNative(channel, (byte*)psigname, signameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			fixed (byte* psigname = signame)
			{
				int ret = ChannelSignalExNative(channel, (byte*)psigname, signameLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] string signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (signame != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(signame);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(signame, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelSignalExNative(channel, pStr0, signameLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ref byte signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* psigname = &signame)
				{
					int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, (byte*)psigname, signameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* psigname = signame)
				{
					int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, (byte*)psigname, signameLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_signal_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSignalEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "signame")] [NativeName(NativeNameType.Type, "const char*")] string signame, [NativeName(NativeNameType.Param, "signame_len")] [NativeName(NativeNameType.Type, "size_t")] nuint signameLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (signame != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(signame);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(signame, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelSignalExNative((Libssh2Channel*)pchannel, pStr0, signameLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelProcessStartupNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, byte*, uint, byte*, uint, int>)vt[47])(channel, request, requestLen, message, messageLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, int>)vt[47])((nint)channel, (nint)request, requestLen, (nint)message, messageLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			int ret = ChannelProcessStartupNative(channel, request, requestLen, message, messageLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, request, requestLen, message, messageLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ref byte request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (byte* prequest = &request)
			{
				int ret = ChannelProcessStartupNative(channel, (byte*)prequest, requestLen, message, messageLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (byte* prequest = request)
			{
				int ret = ChannelProcessStartupNative(channel, (byte*)prequest, requestLen, message, messageLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] string request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (request != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(request);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(request, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelProcessStartupNative(channel, pStr0, requestLen, message, messageLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ref byte request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* prequest = &request)
				{
					int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, (byte*)prequest, requestLen, message, messageLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* prequest = request)
				{
					int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, (byte*)prequest, requestLen, message, messageLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] string request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] byte* message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (request != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(request);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(request, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, pStr0, requestLen, message, messageLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ref byte message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (byte* pmessage = &message)
			{
				int ret = ChannelProcessStartupNative(channel, request, requestLen, (byte*)pmessage, messageLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (byte* pmessage = message)
			{
				int ret = ChannelProcessStartupNative(channel, request, requestLen, (byte*)pmessage, messageLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] string message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (message != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(message);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(message, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = ChannelProcessStartupNative(channel, request, requestLen, pStr0, messageLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ref byte message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pmessage = &message)
				{
					int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, request, requestLen, (byte*)pmessage, messageLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pmessage = message)
				{
					int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, request, requestLen, (byte*)pmessage, messageLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] byte* request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] string message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (message != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(message);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(message, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, request, requestLen, pStr0, messageLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ref byte request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ref byte message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (byte* prequest = &request)
			{
				fixed (byte* pmessage = &message)
				{
					int ret = ChannelProcessStartupNative(channel, (byte*)prequest, requestLen, (byte*)pmessage, messageLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (byte* prequest = request)
			{
				fixed (byte* pmessage = message)
				{
					int ret = ChannelProcessStartupNative(channel, (byte*)prequest, requestLen, (byte*)pmessage, messageLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] string request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] string message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (request != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(request);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(request, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (message != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(message);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(message, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = ChannelProcessStartupNative(channel, pStr0, requestLen, pStr1, messageLen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ref byte request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ref byte message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* prequest = &request)
				{
					fixed (byte* pmessage = &message)
					{
						int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, (byte*)prequest, requestLen, (byte*)pmessage, messageLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* prequest = request)
				{
					fixed (byte* pmessage = message)
					{
						int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, (byte*)prequest, requestLen, (byte*)pmessage, messageLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_process_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelProcessStartup([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "request")] [NativeName(NativeNameType.Type, "const char*")] string request, [NativeName(NativeNameType.Param, "request_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint requestLen, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "const char*")] string message, [NativeName(NativeNameType.Param, "message_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint messageLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (request != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(request);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(request, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (message != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(message);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(message, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = ChannelProcessStartupNative((Libssh2Channel*)pchannel, pStr0, requestLen, pStr1, messageLen);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		internal static nint ChannelReadExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, byte*, ulong, nint>)vt[48])(channel, streamId, buf, buflen);
			#else
			return (nint)((delegate* unmanaged[Cdecl]<nint, int, nint, ulong, nint>)vt[48])((nint)channel, streamId, (nint)buf, buflen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			nint ret = ChannelReadExNative(channel, streamId, buf, buflen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				nint ret = ChannelReadExNative((Libssh2Channel*)pchannel, streamId, buf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (byte* pbuf = &buf)
			{
				nint ret = ChannelReadExNative(channel, streamId, (byte*)pbuf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = ChannelReadExNative(channel, streamId, pStr0, buflen);
			buf = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pbuf = &buf)
				{
					nint ret = ChannelReadExNative((Libssh2Channel*)pchannel, streamId, (byte*)pbuf, buflen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buf != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buf);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = ChannelReadExNative((Libssh2Channel*)pchannel, streamId, pStr0, buflen);
				buf = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			nint ret = ChannelReadExNative(channel, streamId, buf, buflen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				nint ret = ChannelReadExNative((Libssh2Channel*)pchannel, streamId, buf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (byte* pbuf = &buf)
			{
				nint ret = ChannelReadExNative(channel, streamId, (byte*)pbuf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = ChannelReadExNative(channel, streamId, pStr0, buflen);
			buf = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pbuf = &buf)
				{
					nint ret = ChannelReadExNative((Libssh2Channel*)pchannel, streamId, (byte*)pbuf, buflen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_read_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "char*")] ref string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buf != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buf);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = ChannelReadExNative((Libssh2Channel*)pchannel, streamId, pStr0, buflen);
				buf = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_poll_channel_read")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int PollChannelReadNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "extended")] [NativeName(NativeNameType.Type, "int")] int extended)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, int>)vt[49])(channel, extended);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[49])((nint)channel, extended);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_poll_channel_read")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PollChannelRead([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "extended")] [NativeName(NativeNameType.Type, "int")] int extended)
		{
			int ret = PollChannelReadNative(channel, extended);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_poll_channel_read")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PollChannelRead([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "extended")] [NativeName(NativeNameType.Type, "int")] int extended)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = PollChannelReadNative((Libssh2Channel*)pchannel, extended);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint ChannelWindowReadExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, uint*, uint*, uint>)vt[50])(channel, readAvail, windowSizeInitial);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, nint, uint>)vt[50])((nint)channel, (nint)readAvail, (nint)windowSizeInitial);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			uint ret = ChannelWindowReadExNative(channel, readAvail, windowSizeInitial);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				uint ret = ChannelWindowReadExNative((Libssh2Channel*)pchannel, readAvail, windowSizeInitial);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			fixed (uint* preadAvail = &readAvail)
			{
				uint ret = ChannelWindowReadExNative(channel, (uint*)preadAvail, windowSizeInitial);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (uint* preadAvail = &readAvail)
				{
					uint ret = ChannelWindowReadExNative((Libssh2Channel*)pchannel, (uint*)preadAvail, windowSizeInitial);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint windowSizeInitial)
		{
			fixed (uint* pwindowSizeInitial = &windowSizeInitial)
			{
				uint ret = ChannelWindowReadExNative(channel, readAvail, (uint*)pwindowSizeInitial);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint windowSizeInitial)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (uint* pwindowSizeInitial = &windowSizeInitial)
				{
					uint ret = ChannelWindowReadExNative((Libssh2Channel*)pchannel, readAvail, (uint*)pwindowSizeInitial);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint windowSizeInitial)
		{
			fixed (uint* preadAvail = &readAvail)
			{
				fixed (uint* pwindowSizeInitial = &windowSizeInitial)
				{
					uint ret = ChannelWindowReadExNative(channel, (uint*)preadAvail, (uint*)pwindowSizeInitial);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_read_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowReadEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "read_avail")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint readAvail, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint windowSizeInitial)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (uint* preadAvail = &readAvail)
				{
					fixed (uint* pwindowSizeInitial = &windowSizeInitial)
					{
						uint ret = ChannelWindowReadExNative((Libssh2Channel*)pchannel, (uint*)preadAvail, (uint*)pwindowSizeInitial);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_channel_receive_window_adjust() is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint ChannelReceiveWindowAdjustNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, uint, byte, uint>)vt[51])(channel, adjustment, force);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint, byte, uint>)vt[51])((nint)channel, adjustment, force);
			#endif
		}

		/// <summary>
		/// libssh2_channel_receive_window_adjust() is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelReceiveWindowAdjust([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force)
		{
			uint ret = ChannelReceiveWindowAdjustNative(channel, adjustment, force);
			return ret;
		}

		/// <summary>
		/// libssh2_channel_receive_window_adjust() is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelReceiveWindowAdjust([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				uint ret = ChannelReceiveWindowAdjustNative((Libssh2Channel*)pchannel, adjustment, force);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust2")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelReceiveWindowAdjust2Native([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force, [NativeName(NativeNameType.Param, "storewindow")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* storewindow)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, uint, byte, uint*, int>)vt[52])(channel, adjustment, force, storewindow);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, uint, byte, nint, int>)vt[52])((nint)channel, adjustment, force, (nint)storewindow);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust2")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelReceiveWindowAdjust2([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force, [NativeName(NativeNameType.Param, "storewindow")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* storewindow)
		{
			int ret = ChannelReceiveWindowAdjust2Native(channel, adjustment, force, storewindow);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust2")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelReceiveWindowAdjust2([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force, [NativeName(NativeNameType.Param, "storewindow")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* storewindow)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelReceiveWindowAdjust2Native((Libssh2Channel*)pchannel, adjustment, force, storewindow);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust2")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelReceiveWindowAdjust2([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force, [NativeName(NativeNameType.Param, "storewindow")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint storewindow)
		{
			fixed (uint* pstorewindow = &storewindow)
			{
				int ret = ChannelReceiveWindowAdjust2Native(channel, adjustment, force, (uint*)pstorewindow);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_receive_window_adjust2")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelReceiveWindowAdjust2([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "adjustment")] [NativeName(NativeNameType.Type, "unsigned int")] uint adjustment, [NativeName(NativeNameType.Param, "force")] [NativeName(NativeNameType.Type, "unsigned char")] byte force, [NativeName(NativeNameType.Param, "storewindow")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint storewindow)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (uint* pstorewindow = &storewindow)
				{
					int ret = ChannelReceiveWindowAdjust2Native((Libssh2Channel*)pchannel, adjustment, force, (uint*)pstorewindow);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		internal static nint ChannelWriteExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, byte*, ulong, nint>)vt[53])(channel, streamId, buf, buflen);
			#else
			return (nint)((delegate* unmanaged[Cdecl]<nint, int, nint, ulong, nint>)vt[53])((nint)channel, streamId, (nint)buf, buflen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			nint ret = ChannelWriteExNative(channel, streamId, buf, buflen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, buf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (byte* pbuf = &buf)
			{
				nint ret = ChannelWriteExNative(channel, streamId, (byte*)pbuf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (byte* pbuf = buf)
			{
				nint ret = ChannelWriteExNative(channel, streamId, (byte*)pbuf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = ChannelWriteExNative(channel, streamId, pStr0, buflen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pbuf = &buf)
				{
					nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, (byte*)pbuf, buflen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pbuf = buf)
				{
					nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, (byte*)pbuf, buflen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buf != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buf);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, pStr0, buflen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			nint ret = ChannelWriteExNative(channel, streamId, buf, buflen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] byte* buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, buf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (byte* pbuf = &buf)
			{
				nint ret = ChannelWriteExNative(channel, streamId, (byte*)pbuf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (byte* pbuf = buf)
			{
				nint ret = ChannelWriteExNative(channel, streamId, (byte*)pbuf, buflen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = ChannelWriteExNative(channel, streamId, pStr0, buflen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ref byte buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pbuf = &buf)
				{
					nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, (byte*)pbuf, buflen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte* pbuf = buf)
				{
					nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, (byte*)pbuf, buflen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_write_ex")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint ChannelWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "stream_id")] [NativeName(NativeNameType.Type, "int")] int streamId, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "const char*")] string buf, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buf != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buf);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = ChannelWriteExNative((Libssh2Channel*)pchannel, streamId, pStr0, buflen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_write_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint ChannelWindowWriteExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, uint*, uint>)vt[54])(channel, windowSizeInitial);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)vt[54])((nint)channel, (nint)windowSizeInitial);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_write_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			uint ret = ChannelWindowWriteExNative(channel, windowSizeInitial);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_write_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* windowSizeInitial)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				uint ret = ChannelWindowWriteExNative((Libssh2Channel*)pchannel, windowSizeInitial);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_write_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint windowSizeInitial)
		{
			fixed (uint* pwindowSizeInitial = &windowSizeInitial)
			{
				uint ret = ChannelWindowWriteExNative(channel, (uint*)pwindowSizeInitial);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_window_write_ex")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint ChannelWindowWriteEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "window_size_initial")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint windowSizeInitial)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (uint* pwindowSizeInitial = &windowSizeInitial)
				{
					uint ret = ChannelWindowWriteExNative((Libssh2Channel*)pchannel, (uint*)pwindowSizeInitial);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_blocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SessionSetBlockingNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "blocking")] [NativeName(NativeNameType.Type, "int")] int blocking)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Session*, int, void>)vt[55])(session, blocking);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[55])((nint)session, blocking);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_blocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SessionSetBlocking([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "blocking")] [NativeName(NativeNameType.Type, "int")] int blocking)
		{
			SessionSetBlockingNative(session, blocking);
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_blocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SessionSetBlocking([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "blocking")] [NativeName(NativeNameType.Type, "int")] int blocking)
		{
			fixed (Libssh2Session* psession = &session)
			{
				SessionSetBlockingNative((Libssh2Session*)psession, blocking);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_blocking")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionGetBlockingNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[56])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[56])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_blocking")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionGetBlocking([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = SessionGetBlockingNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_blocking")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionGetBlocking([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionGetBlockingNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_set_blocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ChannelSetBlockingNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "blocking")] [NativeName(NativeNameType.Type, "int")] int blocking)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, void>)vt[57])(channel, blocking);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[57])((nint)channel, blocking);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_set_blocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ChannelSetBlocking([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "blocking")] [NativeName(NativeNameType.Type, "int")] int blocking)
		{
			ChannelSetBlockingNative(channel, blocking);
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_set_blocking")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ChannelSetBlocking([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "blocking")] [NativeName(NativeNameType.Type, "int")] int blocking)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				ChannelSetBlockingNative((Libssh2Channel*)pchannel, blocking);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_timeout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SessionSetTimeoutNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "int")] int timeout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Session*, int, void>)vt[58])(session, timeout);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[58])((nint)session, timeout);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_timeout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SessionSetTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "int")] int timeout)
		{
			SessionSetTimeoutNative(session, timeout);
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_timeout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SessionSetTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "int")] int timeout)
		{
			fixed (Libssh2Session* psession = &session)
			{
				SessionSetTimeoutNative((Libssh2Session*)psession, timeout);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_timeout")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionGetTimeoutNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[59])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[59])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_timeout")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionGetTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = SessionGetTimeoutNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_timeout")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionGetTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionGetTimeoutNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_read_timeout")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void SessionSetReadTimeoutNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "int")] int timeout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Session*, int, void>)vt[60])(session, timeout);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[60])((nint)session, timeout);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_read_timeout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SessionSetReadTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "int")] int timeout)
		{
			SessionSetReadTimeoutNative(session, timeout);
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_read_timeout")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SessionSetReadTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "int")] int timeout)
		{
			fixed (Libssh2Session* psession = &session)
			{
				SessionSetReadTimeoutNative((Libssh2Session*)psession, timeout);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_read_timeout")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionGetReadTimeoutNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[61])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[61])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_read_timeout")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionGetReadTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = SessionGetReadTimeoutNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_get_read_timeout")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionGetReadTimeout([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionGetReadTimeoutNative((Libssh2Session*)psession);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_channel_handle_extended_data() is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_channel_handle_extended_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ChannelHandleExtendedDataNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "ignore_mode")] [NativeName(NativeNameType.Type, "int")] int ignoreMode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, void>)vt[62])(channel, ignoreMode);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)vt[62])((nint)channel, ignoreMode);
			#endif
		}

		/// <summary>
		/// libssh2_channel_handle_extended_data() is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_channel_handle_extended_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ChannelHandleExtendedData([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "ignore_mode")] [NativeName(NativeNameType.Type, "int")] int ignoreMode)
		{
			ChannelHandleExtendedDataNative(channel, ignoreMode);
		}

		/// <summary>
		/// libssh2_channel_handle_extended_data() is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_channel_handle_extended_data")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ChannelHandleExtendedData([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "ignore_mode")] [NativeName(NativeNameType.Type, "int")] int ignoreMode)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				ChannelHandleExtendedDataNative((Libssh2Channel*)pchannel, ignoreMode);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_handle_extended_data2")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelHandleExtendedData2Native([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "ignore_mode")] [NativeName(NativeNameType.Type, "int")] int ignoreMode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, int>)vt[63])(channel, ignoreMode);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[63])((nint)channel, ignoreMode);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_handle_extended_data2")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelHandleExtendedData2([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "ignore_mode")] [NativeName(NativeNameType.Type, "int")] int ignoreMode)
		{
			int ret = ChannelHandleExtendedData2Native(channel, ignoreMode);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_handle_extended_data2")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelHandleExtendedData2([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "ignore_mode")] [NativeName(NativeNameType.Type, "int")] int ignoreMode)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelHandleExtendedData2Native((Libssh2Channel*)pchannel, ignoreMode);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_flush_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelFlushExNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "streamid")] [NativeName(NativeNameType.Type, "int")] int streamid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int, int>)vt[64])(channel, streamid);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[64])((nint)channel, streamid);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_flush_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelFlushEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "streamid")] [NativeName(NativeNameType.Type, "int")] int streamid)
		{
			int ret = ChannelFlushExNative(channel, streamid);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_flush_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelFlushEx([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "streamid")] [NativeName(NativeNameType.Type, "int")] int streamid)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelFlushExNative((Libssh2Channel*)pchannel, streamid);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_status")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelGetExitStatusNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[65])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[65])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_status")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitStatus([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelGetExitStatusNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_status")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitStatus([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelGetExitStatusNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelGetExitSignalNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, byte**, ulong*, byte**, ulong*, byte**, ulong*, int>)vt[66])(channel, exitsignal, exitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, nint, nint, int>)vt[66])((nint)channel, (nint)exitsignal, (nint)exitsignalLen, (nint)errmsg, (nint)errmsgLen, (nint)langtag, (nint)langtagLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* perrmsgLen = &errmsgLen)
			{
				int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (nuint* perrmsgLen = &errmsgLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, langtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** plangtag = &langtag)
			{
				int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** plangtag = &langtag)
				{
					int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** plangtag = &langtag)
				{
					int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** plangtag = &langtag)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (byte** plangtag = &langtag)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (byte** plangtag = &langtag)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, langtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* perrmsgLen = &errmsgLen)
			{
				fixed (byte** plangtag = &langtag)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
							return ret;
						}
					}
				}
			}
		}
	}
}
