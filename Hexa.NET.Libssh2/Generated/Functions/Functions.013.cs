// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (nuint* perrmsgLen = &errmsgLen)
							{
								fixed (byte** plangtag = &langtag)
								{
									int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, langtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* plangtagLen = &langtagLen)
			{
				int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* plangtagLen = &langtagLen)
				{
					int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* plangtagLen = &langtagLen)
				{
					int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (nuint* plangtagLen = &langtagLen)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (nuint* plangtagLen = &langtagLen)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, langtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* perrmsgLen = &errmsgLen)
			{
				fixed (nuint* plangtagLen = &langtagLen)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] byte** langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (nuint* perrmsgLen = &errmsgLen)
							{
								fixed (nuint* plangtagLen = &langtagLen)
								{
									int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, langtag, (ulong*)plangtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** plangtag = &langtag)
			{
				fixed (nuint* plangtagLen = &langtagLen)
				{
					int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** plangtag = &langtag)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** plangtag = &langtag)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** plangtag = &langtag)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (byte** plangtag = &langtag)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (byte** plangtag = &langtag)
							{
								fixed (nuint* plangtagLen = &langtagLen)
								{
									int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, errmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* perrmsgLen = &errmsgLen)
			{
				fixed (byte** plangtag = &langtag)
				{
					fixed (nuint* plangtagLen = &langtagLen)
					{
						int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								fixed (nuint* plangtagLen = &langtagLen)
								{
									int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, errmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (nuint* perrmsgLen = &errmsgLen)
				{
					fixed (byte** plangtag = &langtag)
					{
						fixed (nuint* plangtagLen = &langtagLen)
						{
							int ret = ChannelGetExitSignalNative(channel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								fixed (nuint* plangtagLen = &langtagLen)
								{
									int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, exitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (nuint* pexitsignalLen = &exitsignalLen)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (nuint* perrmsgLen = &errmsgLen)
					{
						fixed (byte** plangtag = &langtag)
						{
							fixed (nuint* plangtagLen = &langtagLen)
							{
								int ret = ChannelGetExitSignalNative(channel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] byte** exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								fixed (nuint* plangtagLen = &langtagLen)
								{
									int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, exitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (byte** pexitsignal = &exitsignal)
			{
				fixed (nuint* pexitsignalLen = &exitsignalLen)
				{
					fixed (byte** perrmsg = &errmsg)
					{
						fixed (nuint* perrmsgLen = &errmsgLen)
						{
							fixed (byte** plangtag = &langtag)
							{
								fixed (nuint* plangtagLen = &langtagLen)
								{
									int ret = ChannelGetExitSignalNative(channel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_get_exit_signal")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelGetExitSignal([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel, [NativeName(NativeNameType.Param, "exitsignal")] [NativeName(NativeNameType.Type, "char**")] ref byte* exitsignal, [NativeName(NativeNameType.Param, "exitsignal_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint exitsignalLen, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint errmsgLen, [NativeName(NativeNameType.Param, "langtag")] [NativeName(NativeNameType.Type, "char**")] ref byte* langtag, [NativeName(NativeNameType.Param, "langtag_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint langtagLen)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				fixed (byte** pexitsignal = &exitsignal)
				{
					fixed (nuint* pexitsignalLen = &exitsignalLen)
					{
						fixed (byte** perrmsg = &errmsg)
						{
							fixed (nuint* perrmsgLen = &errmsgLen)
							{
								fixed (byte** plangtag = &langtag)
								{
									fixed (nuint* plangtagLen = &langtagLen)
									{
										int ret = ChannelGetExitSignalNative((Libssh2Channel*)pchannel, (byte**)pexitsignal, (ulong*)pexitsignalLen, (byte**)perrmsg, (ulong*)perrmsgLen, (byte**)plangtag, (ulong*)plangtagLen);
										return ret;
									}
								}
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_send_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelSendEofNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[67])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[67])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_send_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSendEof([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelSendEofNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_send_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelSendEof([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelSendEofNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelEofNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[68])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[68])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelEof([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelEofNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelEof([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelEofNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_wait_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelWaitEofNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[69])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[69])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_wait_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelWaitEof([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelWaitEofNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_wait_eof")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelWaitEof([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelWaitEofNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_close")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelCloseNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[70])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[70])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_close")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelClose([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelCloseNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_close")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelClose([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelCloseNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_wait_closed")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelWaitClosedNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[71])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[71])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_wait_closed")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelWaitClosed([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelWaitClosedNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_wait_closed")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelWaitClosed([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelWaitClosedNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_free")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int ChannelFreeNative([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Channel*, int>)vt[72])(channel);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[72])((nint)channel);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_free")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelFree([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] Libssh2Channel* channel)
		{
			int ret = ChannelFreeNative(channel);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_channel_free")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ChannelFree([NativeName(NativeNameType.Param, "channel")] [NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")] ref Libssh2Channel channel)
		{
			fixed (Libssh2Channel* pchannel = &channel)
			{
				int ret = ChannelFreeNative((Libssh2Channel*)pchannel);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* ScpRecvNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, Stat*, Libssh2Channel*>)vt[73])(session, path, sb);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)vt[73])((nint)session, (nint)path, (nint)sb);
			#endif
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			Libssh2Channel* ret = ScpRecvNative(session, path, sb);
			return ret;
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, path, sb);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			fixed (byte* ppath = &path)
			{
				Libssh2Channel* ret = ScpRecvNative(session, (byte*)ppath, sb);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			fixed (byte* ppath = path)
			{
				Libssh2Channel* ret = ScpRecvNative(session, (byte*)ppath, sb);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ScpRecvNative(session, pStr0, sb);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, (byte*)ppath, sb);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, (byte*)ppath, sb);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] Stat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, pStr0, sb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (Stat* psb = &sb)
			{
				Libssh2Channel* ret = ScpRecvNative(session, path, (Stat*)psb);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (Stat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, path, (Stat*)psb);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (byte* ppath = &path)
			{
				fixed (Stat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecvNative(session, (byte*)ppath, (Stat*)psb);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (byte* ppath = path)
			{
				fixed (Stat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecvNative(session, (byte*)ppath, (Stat*)psb);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Stat* psb = &sb)
			{
				Libssh2Channel* ret = ScpRecvNative(session, pStr0, (Stat*)psb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					fixed (Stat* psb = &sb)
					{
						Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, (byte*)ppath, (Stat*)psb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					fixed (Stat* psb = &sb)
					{
						Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, (byte*)ppath, (Stat*)psb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_scp_recv is DEPRECATED, do not use! <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "stat*")] ref Stat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Stat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecvNative((Libssh2Session*)psession, pStr0, (Stat*)psb);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* ScpRecv2Native([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, Libssh2StructStat*, Libssh2Channel*>)vt[74])(session, path, sb);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)vt[74])((nint)session, (nint)path, (nint)sb);
			#endif
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			Libssh2Channel* ret = ScpRecv2Native(session, path, sb);
			return ret;
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, path, sb);
				return ret;
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			fixed (byte* ppath = &path)
			{
				Libssh2Channel* ret = ScpRecv2Native(session, (byte*)ppath, sb);
				return ret;
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			fixed (byte* ppath = path)
			{
				Libssh2Channel* ret = ScpRecv2Native(session, (byte*)ppath, sb);
				return ret;
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ScpRecv2Native(session, pStr0, sb);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, (byte*)ppath, sb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, (byte*)ppath, sb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] Libssh2StructStat* sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, pStr0, sb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (Libssh2StructStat* psb = &sb)
			{
				Libssh2Channel* ret = ScpRecv2Native(session, path, (Libssh2StructStat*)psb);
				return ret;
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (Libssh2StructStat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, path, (Libssh2StructStat*)psb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (byte* ppath = &path)
			{
				fixed (Libssh2StructStat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecv2Native(session, (byte*)ppath, (Libssh2StructStat*)psb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (byte* ppath = path)
			{
				fixed (Libssh2StructStat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecv2Native(session, (byte*)ppath, (Libssh2StructStat*)psb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2StructStat* psb = &sb)
			{
				Libssh2Channel* ret = ScpRecv2Native(session, pStr0, (Libssh2StructStat*)psb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					fixed (Libssh2StructStat* psb = &sb)
					{
						Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, (byte*)ppath, (Libssh2StructStat*)psb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					fixed (Libssh2StructStat* psb = &sb)
					{
						Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, (byte*)ppath, (Libssh2StructStat*)psb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Use libssh2_scp_recv2() for large (> 2GB) file support on windows <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_scp_recv2")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpRecv2([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "sb")] [NativeName(NativeNameType.Type, "libssh2_struct_stat*")] ref Libssh2StructStat sb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2StructStat* psb = &sb)
				{
					Libssh2Channel* ret = ScpRecv2Native((Libssh2Session*)psession, pStr0, (Libssh2StructStat*)psb);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* ScpSendExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, int, ulong, int, int, Libssh2Channel*>)vt[75])(session, path, mode, size, mtime, atime);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint, int, ulong, int, int, nint>)vt[75])((nint)session, (nint)path, mode, size, mtime, atime);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			Libssh2Channel* ret = ScpSendExNative(session, path, mode, size, mtime, atime);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, path, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (byte* ppath = &path)
			{
				Libssh2Channel* ret = ScpSendExNative(session, (byte*)ppath, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (byte* ppath = path)
			{
				Libssh2Channel* ret = ScpSendExNative(session, (byte*)ppath, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ScpSendExNative(session, pStr0, mode, size, mtime, atime);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, (byte*)ppath, mode, size, mtime, atime);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, (byte*)ppath, mode, size, mtime, atime);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] ulong size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, pStr0, mode, size, mtime, atime);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			Libssh2Channel* ret = ScpSendExNative(session, path, mode, size, mtime, atime);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, path, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (byte* ppath = &path)
			{
				Libssh2Channel* ret = ScpSendExNative(session, (byte*)ppath, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (byte* ppath = path)
			{
				Libssh2Channel* ret = ScpSendExNative(session, (byte*)ppath, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ScpSendExNative(session, pStr0, mode, size, mtime, atime);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, (byte*)ppath, mode, size, mtime, atime);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, (byte*)ppath, mode, size, mtime, atime);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSendEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "int")] int mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "int")] int atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ScpSendExNative((Libssh2Session*)psession, pStr0, mode, size, mtime, atime);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* ScpSend64Native([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, int, long, long, long, Libssh2Channel*>)vt[76])(session, path, mode, size, mtime, atime);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint, int, long, long, long, nint>)vt[76])((nint)session, (nint)path, mode, size, mtime, atime);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			Libssh2Channel* ret = ScpSend64Native(session, path, mode, size, mtime, atime);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Channel* ret = ScpSend64Native((Libssh2Session*)psession, path, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			fixed (byte* ppath = &path)
			{
				Libssh2Channel* ret = ScpSend64Native(session, (byte*)ppath, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			fixed (byte* ppath = path)
			{
				Libssh2Channel* ret = ScpSend64Native(session, (byte*)ppath, mode, size, mtime, atime);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2Channel* ret = ScpSend64Native(session, pStr0, mode, size, mtime, atime);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = &path)
				{
					Libssh2Channel* ret = ScpSend64Native((Libssh2Session*)psession, (byte*)ppath, mode, size, mtime, atime);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppath = path)
				{
					Libssh2Channel* ret = ScpSend64Native((Libssh2Session*)psession, (byte*)ppath, mode, size, mtime, atime);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_scp_send64")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* ScpSend64([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "libssh2_int64_t")] long size, [NativeName(NativeNameType.Param, "mtime")] [NativeName(NativeNameType.Type, "time_t")] long mtime, [NativeName(NativeNameType.Param, "atime")] [NativeName(NativeNameType.Type, "time_t")] long atime)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2Channel* ret = ScpSend64Native((Libssh2Session*)psession, pStr0, mode, size, mtime, atime);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int Base64DecodeNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte**, uint*, byte*, uint, int>)vt[77])(session, dest, destLen, src, srcLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, uint, int>)vt[77])((nint)session, (nint)dest, (nint)destLen, (nint)src, srcLen);
			#endif
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			int ret = Base64DecodeNative(session, dest, destLen, src, srcLen);
			return ret;
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = Base64DecodeNative((Libssh2Session*)psession, dest, destLen, src, srcLen);
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				int ret = Base64DecodeNative(session, (byte**)pdest, destLen, src, srcLen);
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, destLen, src, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (uint* pdestLen = &destLen)
			{
				int ret = Base64DecodeNative(session, dest, (uint*)pdestLen, src, srcLen);
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (uint* pdestLen = &destLen)
				{
					int ret = Base64DecodeNative((Libssh2Session*)psession, dest, (uint*)pdestLen, src, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				fixed (uint* pdestLen = &destLen)
				{
					int ret = Base64DecodeNative(session, (byte**)pdest, (uint*)pdestLen, src, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] byte* src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					fixed (uint* pdestLen = &destLen)
					{
						int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, (uint*)pdestLen, src, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte* psrc = &src)
			{
				int ret = Base64DecodeNative(session, dest, destLen, (byte*)psrc, srcLen);
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte* psrc = src)
			{
				int ret = Base64DecodeNative(session, dest, destLen, (byte*)psrc, srcLen);
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = Base64DecodeNative(session, dest, destLen, pStr0, srcLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* psrc = &src)
				{
					int ret = Base64DecodeNative((Libssh2Session*)psession, dest, destLen, (byte*)psrc, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* psrc = src)
				{
					int ret = Base64DecodeNative((Libssh2Session*)psession, dest, destLen, (byte*)psrc, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (src != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(src);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = Base64DecodeNative((Libssh2Session*)psession, dest, destLen, pStr0, srcLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				fixed (byte* psrc = &src)
				{
					int ret = Base64DecodeNative(session, (byte**)pdest, destLen, (byte*)psrc, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				fixed (byte* psrc = src)
				{
					int ret = Base64DecodeNative(session, (byte**)pdest, destLen, (byte*)psrc, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (src != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(src);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = Base64DecodeNative(session, (byte**)pdest, destLen, pStr0, srcLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					fixed (byte* psrc = &src)
					{
						int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, destLen, (byte*)psrc, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					fixed (byte* psrc = src)
					{
						int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, destLen, (byte*)psrc, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (src != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(src);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, destLen, pStr0, srcLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (uint* pdestLen = &destLen)
			{
				fixed (byte* psrc = &src)
				{
					int ret = Base64DecodeNative(session, dest, (uint*)pdestLen, (byte*)psrc, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (uint* pdestLen = &destLen)
			{
				fixed (byte* psrc = src)
				{
					int ret = Base64DecodeNative(session, dest, (uint*)pdestLen, (byte*)psrc, srcLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (uint* pdestLen = &destLen)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (src != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(src);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = Base64DecodeNative(session, dest, (uint*)pdestLen, pStr0, srcLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (uint* pdestLen = &destLen)
				{
					fixed (byte* psrc = &src)
					{
						int ret = Base64DecodeNative((Libssh2Session*)psession, dest, (uint*)pdestLen, (byte*)psrc, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (uint* pdestLen = &destLen)
				{
					fixed (byte* psrc = src)
					{
						int ret = Base64DecodeNative((Libssh2Session*)psession, dest, (uint*)pdestLen, (byte*)psrc, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] byte** dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (uint* pdestLen = &destLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (src != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(src);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = Base64DecodeNative((Libssh2Session*)psession, dest, (uint*)pdestLen, pStr0, srcLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				fixed (uint* pdestLen = &destLen)
				{
					fixed (byte* psrc = &src)
					{
						int ret = Base64DecodeNative(session, (byte**)pdest, (uint*)pdestLen, (byte*)psrc, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				fixed (uint* pdestLen = &destLen)
				{
					fixed (byte* psrc = src)
					{
						int ret = Base64DecodeNative(session, (byte**)pdest, (uint*)pdestLen, (byte*)psrc, srcLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (byte** pdest = &dest)
			{
				fixed (uint* pdestLen = &destLen)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (src != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(src);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = Base64DecodeNative(session, (byte**)pdest, (uint*)pdestLen, pStr0, srcLen);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ref byte src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					fixed (uint* pdestLen = &destLen)
					{
						fixed (byte* psrc = &src)
						{
							int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, (uint*)pdestLen, (byte*)psrc, srcLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					fixed (uint* pdestLen = &destLen)
					{
						fixed (byte* psrc = src)
						{
							int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, (uint*)pdestLen, (byte*)psrc, srcLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// DEPRECATED <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_base64_decode")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Base64Decode([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "dest")] [NativeName(NativeNameType.Type, "char**")] ref byte* dest, [NativeName(NativeNameType.Param, "dest_len")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint destLen, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "const char*")] string src, [NativeName(NativeNameType.Param, "src_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint srcLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pdest = &dest)
				{
					fixed (uint* pdestLen = &destLen)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (src != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(src);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = Base64DecodeNative((Libssh2Session*)psession, (byte**)pdest, (uint*)pdestLen, pStr0, srcLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_version")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* VersionNative([NativeName(NativeNameType.Param, "req_version_num")] [NativeName(NativeNameType.Type, "int")] int reqVersionNum)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)vt[78])(reqVersionNum);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)vt[78])(reqVersionNum);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_version")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* Version([NativeName(NativeNameType.Param, "req_version_num")] [NativeName(NativeNameType.Type, "int")] int reqVersionNum)
		{
			byte* ret = VersionNative(reqVersionNum);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_version")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string VersionS([NativeName(NativeNameType.Param, "req_version_num")] [NativeName(NativeNameType.Type, "int")] int reqVersionNum)
		{
			string ret = Utils.DecodeStringUTF8(VersionNative(reqVersionNum));
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_crypto_engine")]
		[return: NativeName(NativeNameType.Type, "libssh2_crypto_engine_t")]
		internal static Libssh2CryptoEngine CryptoEngineNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2CryptoEngine>)vt[79])();
			#else
			return (Libssh2CryptoEngine)((delegate* unmanaged[Cdecl]<Libssh2CryptoEngine>)vt[79])();
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_crypto_engine")]
		[return: NativeName(NativeNameType.Type, "libssh2_crypto_engine_t")]
		public static Libssh2CryptoEngine CryptoEngine()
		{
			Libssh2CryptoEngine ret = CryptoEngineNative();
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_init()<br/>
		/// Init a collection of known hosts. Returns the pointer to a collection.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")]
		internal static Libssh2Knownhosts* KnownhostInitNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, Libssh2Knownhosts*>)vt[80])(session);
			#else
			return (Libssh2Knownhosts*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[80])((nint)session);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_init()<br/>
		/// Init a collection of known hosts. Returns the pointer to a collection.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")]
		public static Libssh2Knownhosts* KnownhostInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			Libssh2Knownhosts* ret = KnownhostInitNative(session);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_init()<br/>
		/// Init a collection of known hosts. Returns the pointer to a collection.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")]
		public static Libssh2Knownhosts* KnownhostInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Knownhosts* ret = KnownhostInitNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostAddNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, byte*, byte*, byte*, ulong, int, Libssh2Knownhost**, int>)vt[81])(hosts, host, salt, key, keylen, typemask, store);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, ulong, int, nint, int>)vt[81])((nint)hosts, (nint)host, (nint)salt, (nint)key, keylen, typemask, (nint)store);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			int ret = KnownhostAddNative(hosts, host, salt, key, keylen, typemask, store);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, salt, key, keylen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, key, keylen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = &salt)
			{
				int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = salt)
			{
				int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddNative(hosts, host, pStr0, key, keylen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, key, keylen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, pStr1, key, keylen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, key, keylen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* pkey = &key)
			{
				int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* pkey = key)
			{
				int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (key != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(key);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddNative(hosts, host, salt, pStr0, keylen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (key != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(key);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, pStr0, keylen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, salt, pStr1, keylen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, pStr1, keylen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddNative(hosts, host, pStr0, pStr1, keylen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, pStr1, keylen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (key != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(key);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, pStr1, pStr2, keylen, typemask, store);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (byte* pkey = &key)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (byte* pkey = key)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (key != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(key);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, pStr2, keylen, typemask, store);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			int ret = KnownhostAddNative(hosts, host, salt, key, keylen, typemask, store);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, salt, key, keylen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, key, keylen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = &salt)
			{
				int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = salt)
			{
				int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddNative(hosts, host, pStr0, key, keylen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, key, keylen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, pStr1, key, keylen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, key, keylen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* pkey = &key)
			{
				int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* pkey = key)
			{
				int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, store);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (key != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(key);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddNative(hosts, host, salt, pStr0, keylen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}
	}
}
