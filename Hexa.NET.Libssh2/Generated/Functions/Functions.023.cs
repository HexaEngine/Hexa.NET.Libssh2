// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (Libssh2Knownhost** pknownhost = &knownhost)
					{
						int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, (byte*)phost, port, key, keylen, typemask, (Libssh2Knownhost**)pknownhost);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pknownhost = &knownhost)
				{
					int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, pStr0, port, key, keylen, typemask, (Libssh2Knownhost**)pknownhost);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (byte* pkey = &key)
			{
				fixed (Libssh2Knownhost** pknownhost = &knownhost)
				{
					int ret = KnownhostCheckpNative(hosts, host, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
					return ret;
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (byte* pkey = key)
			{
				fixed (Libssh2Knownhost** pknownhost = &knownhost)
				{
					int ret = KnownhostCheckpNative(hosts, host, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
					return ret;
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (key != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(key);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pknownhost = &knownhost)
			{
				int ret = KnownhostCheckpNative(hosts, host, port, pStr0, keylen, typemask, (Libssh2Knownhost**)pknownhost);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pknownhost = &knownhost)
					{
						int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, host, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pknownhost = &knownhost)
					{
						int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, host, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (key != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(key);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pknownhost = &knownhost)
				{
					int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, host, port, pStr0, keylen, typemask, (Libssh2Knownhost**)pknownhost);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pknownhost = &knownhost)
					{
						int ret = KnownhostCheckpNative(hosts, (byte*)phost, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pknownhost = &knownhost)
					{
						int ret = KnownhostCheckpNative(hosts, (byte*)phost, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pknownhost = &knownhost)
			{
				int ret = KnownhostCheckpNative(hosts, pStr0, port, pStr1, keylen, typemask, (Libssh2Knownhost**)pknownhost);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pknownhost = &knownhost)
						{
							int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, (byte*)phost, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pknownhost = &knownhost)
						{
							int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, (byte*)phost, port, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pknownhost);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// this function is identital to the above one, but also takes a port<br/>
		/// argument that allows libssh2 to do a better check <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_checkp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostCheckp([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "int")] int port, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "knownhost")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* knownhost)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pknownhost = &knownhost)
				{
					int ret = KnownhostCheckpNative((Libssh2Knownhosts*)phosts, pStr0, port, pStr1, keylen, typemask, (Libssh2Knownhost**)pknownhost);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_del()<br/>
		/// Remove a host from the collection of known hosts. The 'entry' struct is<br/>
		/// retrieved by a call to libssh2_knownhost_check().<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_del")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostDelNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* entry)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, Libssh2Knownhost*, int>)vt[85])(hosts, entry);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[85])((nint)hosts, (nint)entry);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_del()<br/>
		/// Remove a host from the collection of known hosts. The 'entry' struct is<br/>
		/// retrieved by a call to libssh2_knownhost_check().<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_del")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostDel([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* entry)
		{
			int ret = KnownhostDelNative(hosts, entry);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_del()<br/>
		/// Remove a host from the collection of known hosts. The 'entry' struct is<br/>
		/// retrieved by a call to libssh2_knownhost_check().<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_del")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostDel([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* entry)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostDelNative((Libssh2Knownhosts*)phosts, entry);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_del()<br/>
		/// Remove a host from the collection of known hosts. The 'entry' struct is<br/>
		/// retrieved by a call to libssh2_knownhost_check().<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_del")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostDel([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost entry)
		{
			fixed (Libssh2Knownhost* pentry = &entry)
			{
				int ret = KnownhostDelNative(hosts, (Libssh2Knownhost*)pentry);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_del()<br/>
		/// Remove a host from the collection of known hosts. The 'entry' struct is<br/>
		/// retrieved by a call to libssh2_knownhost_check().<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_del")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostDel([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost entry)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pentry = &entry)
				{
					int ret = KnownhostDelNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pentry);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_free()<br/>
		/// Free an entire collection of known hosts.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void KnownhostFreeNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, void>)vt[86])(hosts);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[86])((nint)hosts);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_free()<br/>
		/// Free an entire collection of known hosts.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void KnownhostFree([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts)
		{
			KnownhostFreeNative(hosts);
		}

		/// <summary>
		/// libssh2_knownhost_free()<br/>
		/// Free an entire collection of known hosts.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void KnownhostFree([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				KnownhostFreeNative((Libssh2Knownhosts*)phosts);
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostReadlineNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, byte*, ulong, int, int>)vt[87])(hosts, line, len, type);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, ulong, int, int>)vt[87])((nint)hosts, (nint)line, len, type);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			int ret = KnownhostReadlineNative(hosts, line, len, type);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, line, len, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ref byte line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pline = &line)
			{
				int ret = KnownhostReadlineNative(hosts, (byte*)pline, len, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pline = line)
			{
				int ret = KnownhostReadlineNative(hosts, (byte*)pline, len, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] string line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (line != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(line);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(line, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostReadlineNative(hosts, pStr0, len, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ref byte line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pline = &line)
				{
					int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, (byte*)pline, len, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pline = line)
				{
					int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, (byte*)pline, len, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] string line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] ulong len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (line != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(line);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(line, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, pStr0, len, type);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			int ret = KnownhostReadlineNative(hosts, line, len, type);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] byte* line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, line, len, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ref byte line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pline = &line)
			{
				int ret = KnownhostReadlineNative(hosts, (byte*)pline, len, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pline = line)
			{
				int ret = KnownhostReadlineNative(hosts, (byte*)pline, len, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] string line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (line != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(line);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(line, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostReadlineNative(hosts, pStr0, len, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ref byte line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pline = &line)
				{
					int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, (byte*)pline, len, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pline = line)
				{
					int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, (byte*)pline, len, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_readline()<br/>
		/// Pass in a line of a file of 'type'. It makes libssh2 read this line.<br/>
		/// LIBSSH2_KNOWNHOST_FILE_OPENSSH is the only supported type.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_readline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "line")] [NativeName(NativeNameType.Type, "const char*")] string line, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (line != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(line);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(line, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostReadlineNative((Libssh2Knownhosts*)phosts, pStr0, len, type);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostReadfileNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, byte*, int, int>)vt[88])(hosts, filename, type);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)vt[88])((nint)hosts, (nint)filename, type);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			int ret = KnownhostReadfileNative(hosts, filename, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostReadfileNative((Libssh2Knownhosts*)phosts, filename, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = KnownhostReadfileNative(hosts, (byte*)pfilename, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = KnownhostReadfileNative(hosts, (byte*)pfilename, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostReadfileNative(hosts, pStr0, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pfilename = &filename)
				{
					int ret = KnownhostReadfileNative((Libssh2Knownhosts*)phosts, (byte*)pfilename, type);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pfilename = filename)
				{
					int ret = KnownhostReadfileNative((Libssh2Knownhosts*)phosts, (byte*)pfilename, type);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_readfile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostReadfile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostReadfileNative((Libssh2Knownhosts*)phosts, pStr0, type);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostWritelineNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, Libssh2Knownhost*, byte*, ulong, ulong*, int, int>)vt[89])(hosts, known, buffer, buflen, outlen, type);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, ulong, nint, int, int>)vt[89])((nint)hosts, (nint)known, (nint)buffer, buflen, (nint)outlen, type);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			int ret = KnownhostWritelineNative(hosts, known, buffer, buflen, outlen, type);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, buffer, buflen, outlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, buffer, buflen, outlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, buffer, buflen, outlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = KnownhostWritelineNative(hosts, known, (byte*)pbuffer, buflen, outlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostWritelineNative(hosts, known, pStr0, buflen, outlen, type);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, (byte*)pbuffer, buflen, outlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, pStr0, buflen, outlen, type);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, outlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, pStr0, buflen, outlen, type);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					fixed (byte* pbuffer = &buffer)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, outlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (buffer != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(buffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, pStr0, buflen, outlen, type);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			int ret = KnownhostWritelineNative(hosts, known, buffer, buflen, outlen, type);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, buffer, buflen, outlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, buffer, buflen, outlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, buffer, buflen, outlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = KnownhostWritelineNative(hosts, known, (byte*)pbuffer, buflen, outlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostWritelineNative(hosts, known, pStr0, buflen, outlen, type);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, (byte*)pbuffer, buflen, outlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, pStr0, buflen, outlen, type);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, outlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, pStr0, buflen, outlen, type);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					fixed (byte* pbuffer = &buffer)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, outlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ulong* outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (buffer != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(buffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, pStr0, buflen, outlen, type);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (nuint* poutlen = &outlen)
			{
				int ret = KnownhostWritelineNative(hosts, known, buffer, buflen, (ulong*)poutlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, buffer, buflen, (ulong*)poutlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, buffer, buflen, (ulong*)poutlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, buffer, buflen, (ulong*)poutlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative(hosts, known, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutlen = &outlen)
			{
				int ret = KnownhostWritelineNative(hosts, known, pStr0, buflen, (ulong*)poutlen, type);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, pStr0, buflen, (ulong*)poutlen, type);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, pStr0, buflen, (ulong*)poutlen, type);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					fixed (byte* pbuffer = &buffer)
					{
						fixed (nuint* poutlen = &outlen)
						{
							int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] ulong buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (buffer != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(buffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, pStr0, buflen, (ulong*)poutlen, type);
						buffer = Utils.DecodeStringUTF8(pStr0);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (nuint* poutlen = &outlen)
			{
				int ret = KnownhostWritelineNative(hosts, known, buffer, buflen, (ulong*)poutlen, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, buffer, buflen, (ulong*)poutlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, buffer, buflen, (ulong*)poutlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, buffer, buflen, (ulong*)poutlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative(hosts, known, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (nuint* poutlen = &outlen)
			{
				int ret = KnownhostWritelineNative(hosts, known, pStr0, buflen, (ulong*)poutlen, type);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, known, pStr0, buflen, (ulong*)poutlen, type);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhost* pknown = &known)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (nuint* poutlen = &outlen)
				{
					int ret = KnownhostWritelineNative(hosts, (Libssh2Knownhost*)pknown, pStr0, buflen, (ulong*)poutlen, type);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					fixed (byte* pbuffer = &buffer)
					{
						fixed (nuint* poutlen = &outlen)
						{
							int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, (byte*)pbuffer, buflen, (ulong*)poutlen, type);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writeline()<br/>
		/// Ask libssh2 to convert a known host to an output line for storage.<br/>
		/// Note that this function returns LIBSSH2_ERROR_BUFFER_TOO_SMALL if the given<br/>
		/// output buffer is too small to hold the desired output.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writeline")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWriteline([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "known")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost known, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "size_t")] nuint buflen, [NativeName(NativeNameType.Param, "outlen")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint outlen, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pknown = &known)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (buffer != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(buffer);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					fixed (nuint* poutlen = &outlen)
					{
						int ret = KnownhostWritelineNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost*)pknown, pStr0, buflen, (ulong*)poutlen, type);
						buffer = Utils.DecodeStringUTF8(pStr0);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostWritefileNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, byte*, int, int>)vt[90])(hosts, filename, type);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)vt[90])((nint)hosts, (nint)filename, type);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			int ret = KnownhostWritefileNative(hosts, filename, type);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostWritefileNative((Libssh2Knownhosts*)phosts, filename, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfilename = &filename)
			{
				int ret = KnownhostWritefileNative(hosts, (byte*)pfilename, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (byte* pfilename = filename)
			{
				int ret = KnownhostWritefileNative(hosts, (byte*)pfilename, type);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostWritefileNative(hosts, pStr0, type);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pfilename = &filename)
				{
					int ret = KnownhostWritefileNative((Libssh2Knownhosts*)phosts, (byte*)pfilename, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pfilename = filename)
				{
					int ret = KnownhostWritefileNative((Libssh2Knownhosts*)phosts, (byte*)pfilename, type);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_writefile()<br/>
		/// Write hosts+key pairs to a given file.<br/>
		/// This implementation currently only knows one 'type' (openssh), all others<br/>
		/// are reserved for future use.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_writefile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostWritefile([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int")] int type)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostWritefileNative((Libssh2Knownhosts*)phosts, pStr0, type);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostGetNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* prev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, Libssh2Knownhost**, Libssh2Knownhost*, int>)vt[91])(hosts, store, prev);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[91])((nint)hosts, (nint)store, (nint)prev);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* prev)
		{
			int ret = KnownhostGetNative(hosts, store, prev);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* prev)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostGetNative((Libssh2Knownhosts*)phosts, store, prev);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* prev)
		{
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostGetNative(hosts, (Libssh2Knownhost**)pstore, prev);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] Libssh2Knownhost* prev)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostGetNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost**)pstore, prev);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost prev)
		{
			fixed (Libssh2Knownhost* pprev = &prev)
			{
				int ret = KnownhostGetNative(hosts, store, (Libssh2Knownhost*)pprev);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost prev)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost* pprev = &prev)
				{
					int ret = KnownhostGetNative((Libssh2Knownhosts*)phosts, store, (Libssh2Knownhost*)pprev);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost prev)
		{
			fixed (Libssh2Knownhost** pstore = &store)
			{
				fixed (Libssh2Knownhost* pprev = &prev)
				{
					int ret = KnownhostGetNative(hosts, (Libssh2Knownhost**)pstore, (Libssh2Knownhost*)pprev);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_get()<br/>
		/// Traverse the internal list of known hosts. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine host was stored in 'store'<br/>
		/// 1 if end of hosts<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_get")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostGet([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_knownhost*")] ref Libssh2Knownhost prev)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					fixed (Libssh2Knownhost* pprev = &prev)
					{
						int ret = KnownhostGetNative((Libssh2Knownhosts*)phosts, (Libssh2Knownhost**)pstore, (Libssh2Knownhost*)pprev);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_init()<br/>
		/// Init an ssh-agent handle. Returns the pointer to the handle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")]
		internal static Libssh2Agent* AgentInitNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, Libssh2Agent*>)vt[92])(session);
			#else
			return (Libssh2Agent*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[92])((nint)session);
			#endif
		}

		/// <summary>
		/// libssh2_agent_init()<br/>
		/// Init an ssh-agent handle. Returns the pointer to the handle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")]
		public static Libssh2Agent* AgentInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			Libssh2Agent* ret = AgentInitNative(session);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_init()<br/>
		/// Init an ssh-agent handle. Returns the pointer to the handle.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")]
		public static Libssh2Agent* AgentInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Agent* ret = AgentInitNative((Libssh2Session*)psession);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_connect()<br/>
		/// Connect to an ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_connect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AgentConnectNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, int>)vt[93])(agent);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[93])((nint)agent);
			#endif
		}

		/// <summary>
		/// libssh2_agent_connect()<br/>
		/// Connect to an ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_connect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentConnect([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			int ret = AgentConnectNative(agent);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_connect()<br/>
		/// Connect to an ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_connect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentConnect([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentConnectNative((Libssh2Agent*)pagent);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_list_identities()<br/>
		/// Request an ssh-agent to list identities.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_list_identities")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AgentListIdentitiesNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, int>)vt[94])(agent);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[94])((nint)agent);
			#endif
		}

		/// <summary>
		/// libssh2_agent_list_identities()<br/>
		/// Request an ssh-agent to list identities.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_list_identities")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentListIdentities([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			int ret = AgentListIdentitiesNative(agent);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_list_identities()<br/>
		/// Request an ssh-agent to list identities.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_list_identities")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentListIdentities([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentListIdentitiesNative((Libssh2Agent*)pagent);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AgentGetIdentityNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] Libssh2AgentPublickey** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* prev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, Libssh2AgentPublickey**, Libssh2AgentPublickey*, int>)vt[95])(agent, store, prev);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[95])((nint)agent, (nint)store, (nint)prev);
			#endif
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] Libssh2AgentPublickey** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* prev)
		{
			int ret = AgentGetIdentityNative(agent, store, prev);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] Libssh2AgentPublickey** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* prev)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentGetIdentityNative((Libssh2Agent*)pagent, store, prev);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] ref Libssh2AgentPublickey* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* prev)
		{
			fixed (Libssh2AgentPublickey** pstore = &store)
			{
				int ret = AgentGetIdentityNative(agent, (Libssh2AgentPublickey**)pstore, prev);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] ref Libssh2AgentPublickey* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* prev)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey** pstore = &store)
				{
					int ret = AgentGetIdentityNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey**)pstore, prev);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] Libssh2AgentPublickey** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey prev)
		{
			fixed (Libssh2AgentPublickey* pprev = &prev)
			{
				int ret = AgentGetIdentityNative(agent, store, (Libssh2AgentPublickey*)pprev);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] Libssh2AgentPublickey** store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey prev)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pprev = &prev)
				{
					int ret = AgentGetIdentityNative((Libssh2Agent*)pagent, store, (Libssh2AgentPublickey*)pprev);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] ref Libssh2AgentPublickey* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey prev)
		{
			fixed (Libssh2AgentPublickey** pstore = &store)
			{
				fixed (Libssh2AgentPublickey* pprev = &prev)
				{
					int ret = AgentGetIdentityNative(agent, (Libssh2AgentPublickey**)pstore, (Libssh2AgentPublickey*)pprev);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity()<br/>
		/// Traverse the internal list of public keys. Pass NULL to 'prev' to get<br/>
		/// the first one. Or pass a pointer to the previously returned one to get the<br/>
		/// next.<br/>
		/// Returns:<br/>
		/// 0 if a fine public key was stored in 'store'<br/>
		/// 1 if end of public keys<br/>
		/// [negative] on errors<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentGetIdentity([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey**")] ref Libssh2AgentPublickey* store, [NativeName(NativeNameType.Param, "prev")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey prev)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey** pstore = &store)
				{
					fixed (Libssh2AgentPublickey* pprev = &prev)
					{
						int ret = AgentGetIdentityNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey**)pstore, (Libssh2AgentPublickey*)pprev);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AgentUserauthNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, byte*, Libssh2AgentPublickey*, int>)vt[96])(agent, username, identity);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[96])((nint)agent, (nint)username, (nint)identity);
			#endif
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			int ret = AgentUserauthNative(agent, username, identity);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentUserauthNative((Libssh2Agent*)pagent, username, identity);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			fixed (byte* pusername = &username)
			{
				int ret = AgentUserauthNative(agent, (byte*)pusername, identity);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			fixed (byte* pusername = username)
			{
				int ret = AgentUserauthNative(agent, (byte*)pusername, identity);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AgentUserauthNative(agent, pStr0, identity);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pusername = &username)
				{
					int ret = AgentUserauthNative((Libssh2Agent*)pagent, (byte*)pusername, identity);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pusername = username)
				{
					int ret = AgentUserauthNative((Libssh2Agent*)pagent, (byte*)pusername, identity);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AgentUserauthNative((Libssh2Agent*)pagent, pStr0, identity);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				int ret = AgentUserauthNative(agent, username, (Libssh2AgentPublickey*)pidentity);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					int ret = AgentUserauthNative((Libssh2Agent*)pagent, username, (Libssh2AgentPublickey*)pidentity);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (byte* pusername = &username)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					int ret = AgentUserauthNative(agent, (byte*)pusername, (Libssh2AgentPublickey*)pidentity);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (byte* pusername = username)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					int ret = AgentUserauthNative(agent, (byte*)pusername, (Libssh2AgentPublickey*)pidentity);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				int ret = AgentUserauthNative(agent, pStr0, (Libssh2AgentPublickey*)pidentity);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pusername = &username)
				{
					fixed (Libssh2AgentPublickey* pidentity = &identity)
					{
						int ret = AgentUserauthNative((Libssh2Agent*)pagent, (byte*)pusername, (Libssh2AgentPublickey*)pidentity);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pusername = username)
				{
					fixed (Libssh2AgentPublickey* pidentity = &identity)
					{
						int ret = AgentUserauthNative((Libssh2Agent*)pagent, (byte*)pusername, (Libssh2AgentPublickey*)pidentity);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_userauth()<br/>
		/// Do publickey user authentication with the help of ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_userauth")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentUserauth([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					int ret = AgentUserauthNative((Libssh2Agent*)pagent, pStr0, (Libssh2AgentPublickey*)pidentity);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AgentSignNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, Libssh2AgentPublickey*, byte**, ulong*, byte*, ulong, byte*, uint, int>)vt[97])(agent, identity, sig, sLen, data, dLen, method, methodLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, ulong, nint, uint, int>)vt[97])((nint)agent, (nint)identity, (nint)sig, (nint)sLen, (nint)data, dLen, (nint)method, methodLen);
			#endif
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, method, methodLen);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, method, methodLen);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, data, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, data, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pdata = &data)
			{
				int ret = AgentSignNative(agent, identity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, sLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative(agent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, sLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (nuint* psLen = &sLen)
			{
				fixed (byte* pdata = &data)
				{
					int ret = AgentSignNative(agent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative((Libssh2Agent*)pagent, identity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] byte* method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, method, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pmethod = &method)
			{
				int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte* pmethod = method)
			{
				int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, (byte*)pmethod, methodLen);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (method != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(method);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AgentSignNative(agent, identity, sig, sLen, data, dLen, pStr0, methodLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
