// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{
		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SignSkNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte**, ulong*, byte*, ulong, void**, int>)vt[0])(session, sig, sigLen, data, dataLen, @abstract);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, ulong, nint, int>)vt[0])((nint)session, (nint)sig, (nint)sigLen, (nint)data, dataLen, (nint)@abstract);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = SignSkNative(session, sig, sigLen, data, dataLen, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SignSkNative((Libssh2Session*)psession, sig, sigLen, data, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				int ret = SignSkNative(session, (byte**)psig, sigLen, data, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, sigLen, data, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (nuint* psigLen = &sigLen)
			{
				int ret = SignSkNative(session, sig, (ulong*)psigLen, data, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					int ret = SignSkNative((Libssh2Session*)psession, sig, (ulong*)psigLen, data, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					int ret = SignSkNative(session, (byte**)psig, (ulong*)psigLen, data, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psigLen = &sigLen)
					{
						int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, (ulong*)psigLen, data, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pdata = &data)
			{
				int ret = SignSkNative(session, sig, sigLen, (byte*)pdata, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pdata = &data)
				{
					int ret = SignSkNative((Libssh2Session*)psession, sig, sigLen, (byte*)pdata, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					int ret = SignSkNative(session, (byte**)psig, sigLen, (byte*)pdata, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, sigLen, (byte*)pdata, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (nuint* psigLen = &sigLen)
			{
				fixed (byte* pdata = &data)
				{
					int ret = SignSkNative(session, sig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = SignSkNative((Libssh2Session*)psession, sig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = SignSkNative(session, (byte**)psig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psigLen = &sigLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			int ret = SignSkNative(session, sig, sigLen, data, dataLen, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SignSkNative((Libssh2Session*)psession, sig, sigLen, data, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				int ret = SignSkNative(session, (byte**)psig, sigLen, data, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, sigLen, data, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (nuint* psigLen = &sigLen)
			{
				int ret = SignSkNative(session, sig, (ulong*)psigLen, data, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					int ret = SignSkNative((Libssh2Session*)psession, sig, (ulong*)psigLen, data, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					int ret = SignSkNative(session, (byte**)psig, (ulong*)psigLen, data, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psigLen = &sigLen)
					{
						int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, (ulong*)psigLen, data, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte* pdata = &data)
			{
				int ret = SignSkNative(session, sig, sigLen, (byte*)pdata, dataLen, @abstract);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pdata = &data)
				{
					int ret = SignSkNative((Libssh2Session*)psession, sig, sigLen, (byte*)pdata, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				fixed (byte* pdata = &data)
				{
					int ret = SignSkNative(session, (byte**)psig, sigLen, (byte*)pdata, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					fixed (byte* pdata = &data)
					{
						int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, sigLen, (byte*)pdata, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (nuint* psigLen = &sigLen)
			{
				fixed (byte* pdata = &data)
				{
					int ret = SignSkNative(session, sig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = SignSkNative((Libssh2Session*)psession, sig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psigLen = &sigLen)
				{
					fixed (byte* pdata = &data)
					{
						int ret = SignSkNative(session, (byte**)psig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sign_sk")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SignSk([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "sig_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sigLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dataLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psigLen = &sigLen)
					{
						fixed (byte* pdata = &data)
						{
							int ret = SignSkNative((Libssh2Session*)psession, (byte**)psig, (ulong*)psigLen, (byte*)pdata, dataLen, @abstract);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_init()<br/>
		/// Initialize the libssh2 functions.  This typically initialize the<br/>
		/// crypto library.  It uses a global state, and is not thread safe --<br/>
		/// you must make sure this function is not called concurrently.<br/>
		/// Flags can be:<br/>
		/// 0:                              Normal initialize<br/>
		/// LIBSSH2_INIT_NO_CRYPTO:         Do not initialize the crypto library (ie.<br/>
		/// OPENSSL_add_cipher_algoritms() for OpenSSL<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_init")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int InitNative([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)vt[1])(flags);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)vt[1])(flags);
			#endif
		}

		/// <summary>
		/// libssh2_init()<br/>
		/// Initialize the libssh2 functions.  This typically initialize the<br/>
		/// crypto library.  It uses a global state, and is not thread safe --<br/>
		/// you must make sure this function is not called concurrently.<br/>
		/// Flags can be:<br/>
		/// 0:                              Normal initialize<br/>
		/// LIBSSH2_INIT_NO_CRYPTO:         Do not initialize the crypto library (ie.<br/>
		/// OPENSSL_add_cipher_algoritms() for OpenSSL<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_init")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Init([NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "int")] int flags)
		{
			int ret = InitNative(flags);
			return ret;
		}

		/// <summary>
		/// libssh2_exit()<br/>
		/// Exit the libssh2 functions and free's all memory used internal.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_exit")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void ExitNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)vt[2])();
			#else
			((delegate* unmanaged[Cdecl]<void>)vt[2])();
			#endif
		}

		/// <summary>
		/// libssh2_exit()<br/>
		/// Exit the libssh2 functions and free's all memory used internal.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_exit")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Exit()
		{
			ExitNative();
		}

		/// <summary>
		/// libssh2_free()<br/>
		/// Deallocate memory allocated by earlier call to libssh2 functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void FreeNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Session*, void*, void>)vt[3])(session, ptr);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[3])((nint)session, (nint)ptr);
			#endif
		}

		/// <summary>
		/// libssh2_free()<br/>
		/// Deallocate memory allocated by earlier call to libssh2 functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Free([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			FreeNative(session, ptr);
		}

		/// <summary>
		/// libssh2_free()<br/>
		/// Deallocate memory allocated by earlier call to libssh2 functions.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Free([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void*")] void* ptr)
		{
			fixed (Libssh2Session* psession = &session)
			{
				FreeNative((Libssh2Session*)psession, ptr);
			}
		}

		/// <summary>
		/// libssh2_session_supported_algs()<br/>
		/// Fills algs with a list of supported acryptographic algorithms. Returns a<br/>
		/// non-negative number (number of supported algorithms) on success or a<br/>
		/// negative number (an error code) on failure.<br/>
		/// NOTE: on success, algs must be deallocated (by calling libssh2_free) when<br/>
		/// not needed anymore<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_supported_algs")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionSupportedAlgsNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "algs")] [NativeName(NativeNameType.Type, "const char***")] byte*** algs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, byte***, int>)vt[4])(session, methodType, algs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, int>)vt[4])((nint)session, methodType, (nint)algs);
			#endif
		}

		/// <summary>
		/// libssh2_session_supported_algs()<br/>
		/// Fills algs with a list of supported acryptographic algorithms. Returns a<br/>
		/// non-negative number (number of supported algorithms) on success or a<br/>
		/// negative number (an error code) on failure.<br/>
		/// NOTE: on success, algs must be deallocated (by calling libssh2_free) when<br/>
		/// not needed anymore<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_supported_algs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSupportedAlgs([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "algs")] [NativeName(NativeNameType.Type, "const char***")] byte*** algs)
		{
			int ret = SessionSupportedAlgsNative(session, methodType, algs);
			return ret;
		}

		/// <summary>
		/// libssh2_session_supported_algs()<br/>
		/// Fills algs with a list of supported acryptographic algorithms. Returns a<br/>
		/// non-negative number (number of supported algorithms) on success or a<br/>
		/// negative number (an error code) on failure.<br/>
		/// NOTE: on success, algs must be deallocated (by calling libssh2_free) when<br/>
		/// not needed anymore<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_supported_algs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSupportedAlgs([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "algs")] [NativeName(NativeNameType.Type, "const char***")] byte*** algs)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionSupportedAlgsNative((Libssh2Session*)psession, methodType, algs);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_session_supported_algs()<br/>
		/// Fills algs with a list of supported acryptographic algorithms. Returns a<br/>
		/// non-negative number (number of supported algorithms) on success or a<br/>
		/// negative number (an error code) on failure.<br/>
		/// NOTE: on success, algs must be deallocated (by calling libssh2_free) when<br/>
		/// not needed anymore<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_supported_algs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSupportedAlgs([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "algs")] [NativeName(NativeNameType.Type, "const char***")] ref byte** algs)
		{
			fixed (byte*** palgs = &algs)
			{
				int ret = SessionSupportedAlgsNative(session, methodType, (byte***)palgs);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_session_supported_algs()<br/>
		/// Fills algs with a list of supported acryptographic algorithms. Returns a<br/>
		/// non-negative number (number of supported algorithms) on success or a<br/>
		/// negative number (an error code) on failure.<br/>
		/// NOTE: on success, algs must be deallocated (by calling libssh2_free) when<br/>
		/// not needed anymore<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_supported_algs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSupportedAlgs([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "algs")] [NativeName(NativeNameType.Type, "const char***")] ref byte** algs)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte*** palgs = &algs)
				{
					int ret = SessionSupportedAlgsNative((Libssh2Session*)psession, methodType, (byte***)palgs);
					return ret;
				}
			}
		}

		/// <summary>
		/// Session API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_init_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")]
		internal static Libssh2Session* SessionInitExNative([NativeName(NativeNameType.Param, "my_alloc")] [NativeName(NativeNameType.Type, "void* (*)(void* (*)(size_t count, void** abstract)* my_alloc, void (*)(void* ptr, void** abstract)* my_free, void* (*)(void* ptr, size_t count, void** abstract)* my_realloc, void* abstract)*")] delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void*> myAlloc, [NativeName(NativeNameType.Param, "my_free")] [NativeName(NativeNameType.Type, "void (*)(void* (*)(size_t count, void** abstract)* my_alloc, void (*)(void* ptr, void** abstract)* my_free, void* (*)(void* ptr, size_t count, void** abstract)* my_realloc, void* abstract)*")] delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void> myFree, [NativeName(NativeNameType.Param, "my_realloc")] [NativeName(NativeNameType.Type, "void* (*)(void* (*)(size_t count, void** abstract)* my_alloc, void (*)(void* ptr, void** abstract)* my_free, void* (*)(void* ptr, size_t count, void** abstract)* my_realloc, void* abstract)*")] delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void*> myRealloc, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void*")] void* @abstract)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void*>, delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void>, delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void*>, void*, Libssh2Session*>)vt[5])(myAlloc, myFree, myRealloc, @abstract);
			#else
			return (Libssh2Session*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint>)vt[5])((nint)myAlloc, (nint)myFree, (nint)myRealloc, (nint)@abstract);
			#endif
		}

		/// <summary>
		/// Session API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_session_init_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")]
		public static Libssh2Session* SessionInitEx([NativeName(NativeNameType.Param, "my_alloc")] [NativeName(NativeNameType.Type, "void* (*)(void* (*)(size_t count, void** abstract)* my_alloc, void (*)(void* ptr, void** abstract)* my_free, void* (*)(void* ptr, size_t count, void** abstract)* my_realloc, void* abstract)*")] delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void*> myAlloc, [NativeName(NativeNameType.Param, "my_free")] [NativeName(NativeNameType.Type, "void (*)(void* (*)(size_t count, void** abstract)* my_alloc, void (*)(void* ptr, void** abstract)* my_free, void* (*)(void* ptr, size_t count, void** abstract)* my_realloc, void* abstract)*")] delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void> myFree, [NativeName(NativeNameType.Param, "my_realloc")] [NativeName(NativeNameType.Type, "void* (*)(void* (*)(size_t count, void** abstract)* my_alloc, void (*)(void* ptr, void** abstract)* my_free, void* (*)(void* ptr, size_t count, void** abstract)* my_realloc, void* abstract)*")] delegate*<delegate*<ulong, void**, void*>, delegate*<void*, void**, void>, delegate*<void*, ulong, void**, void*>, void*, void*> myRealloc, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void*")] void* @abstract)
		{
			Libssh2Session* ret = SessionInitExNative(myAlloc, myFree, myRealloc, @abstract);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_abstract")]
		[return: NativeName(NativeNameType.Type, "void**")]
		internal static void** SessionAbstractNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, void**>)vt[6])(session);
			#else
			return (void**)((delegate* unmanaged[Cdecl]<nint, nint>)vt[6])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_abstract")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public static void** SessionAbstract([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			void** ret = SessionAbstractNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_abstract")]
		[return: NativeName(NativeNameType.Type, "void**")]
		public static void** SessionAbstract([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				void** ret = SessionAbstractNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_callback_set")]
		[return: NativeName(NativeNameType.Type, "void*")]
		internal static void* SessionCallbackSetNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "cbtype")] [NativeName(NativeNameType.Type, "int")] int cbtype, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "void*")] void* callback)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, void*, void*>)vt[7])(session, cbtype, callback);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, int, nint, nint>)vt[7])((nint)session, cbtype, (nint)callback);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_callback_set")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SessionCallbackSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "cbtype")] [NativeName(NativeNameType.Type, "int")] int cbtype, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "void*")] void* callback)
		{
			void* ret = SessionCallbackSetNative(session, cbtype, callback);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_callback_set")]
		[return: NativeName(NativeNameType.Type, "void*")]
		public static void* SessionCallbackSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "cbtype")] [NativeName(NativeNameType.Type, "int")] int cbtype, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "void*")] void* callback)
		{
			fixed (Libssh2Session* psession = &session)
			{
				void* ret = SessionCallbackSetNative((Libssh2Session*)psession, cbtype, callback);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionBannerSetNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] byte* banner)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, int>)vt[8])(session, banner);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[8])((nint)session, (nint)banner);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] byte* banner)
		{
			int ret = SessionBannerSetNative(session, banner);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] byte* banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionBannerSetNative((Libssh2Session*)psession, banner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ref byte banner)
		{
			fixed (byte* pbanner = &banner)
			{
				int ret = SessionBannerSetNative(session, (byte*)pbanner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> banner)
		{
			fixed (byte* pbanner = banner)
			{
				int ret = SessionBannerSetNative(session, (byte*)pbanner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] string banner)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (banner != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(banner);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(banner, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SessionBannerSetNative(session, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ref byte banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pbanner = &banner)
				{
					int ret = SessionBannerSetNative((Libssh2Session*)psession, (byte*)pbanner);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pbanner = banner)
				{
					int ret = SessionBannerSetNative((Libssh2Session*)psession, (byte*)pbanner);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] string banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (banner != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(banner);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(banner, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SessionBannerSetNative((Libssh2Session*)psession, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int BannerSetNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] byte* banner)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, int>)vt[9])(session, banner);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[9])((nint)session, (nint)banner);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] byte* banner)
		{
			int ret = BannerSetNative(session, banner);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] byte* banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = BannerSetNative((Libssh2Session*)psession, banner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ref byte banner)
		{
			fixed (byte* pbanner = &banner)
			{
				int ret = BannerSetNative(session, (byte*)pbanner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> banner)
		{
			fixed (byte* pbanner = banner)
			{
				int ret = BannerSetNative(session, (byte*)pbanner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] string banner)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (banner != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(banner);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(banner, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = BannerSetNative(session, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ref byte banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pbanner = &banner)
				{
					int ret = BannerSetNative((Libssh2Session*)psession, (byte*)pbanner);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pbanner = banner)
				{
					int ret = BannerSetNative((Libssh2Session*)psession, (byte*)pbanner);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_banner_set")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BannerSet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "const char*")] string banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (banner != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(banner);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(banner, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = BannerSetNative((Libssh2Session*)psession, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionStartupNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sock")] [NativeName(NativeNameType.Type, "int")] int sock)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, int>)vt[10])(session, sock);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[10])((nint)session, sock);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionStartup([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sock")] [NativeName(NativeNameType.Type, "int")] int sock)
		{
			int ret = SessionStartupNative(session, sock);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_startup")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionStartup([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sock")] [NativeName(NativeNameType.Type, "int")] int sock)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionStartupNative((Libssh2Session*)psession, sock);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_handshake")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionHandshakeNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sock")] [NativeName(NativeNameType.Type, "libssh2_socket_t")] Libssh2Socket sock)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, Libssh2Socket, int>)vt[11])(session, sock);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, Libssh2Socket, int>)vt[11])((nint)session, sock);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_handshake")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionHandshake([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sock")] [NativeName(NativeNameType.Type, "libssh2_socket_t")] Libssh2Socket sock)
		{
			int ret = SessionHandshakeNative(session, sock);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_handshake")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionHandshake([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "sock")] [NativeName(NativeNameType.Type, "libssh2_socket_t")] Libssh2Socket sock)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionHandshakeNative((Libssh2Session*)psession, sock);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionDisconnectExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, byte*, byte*, int>)vt[12])(session, reason, description, lang);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int>)vt[12])((nint)session, reason, (nint)description, (nint)lang);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			int ret = SessionDisconnectExNative(session, reason, description, lang);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, description, lang);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ref byte description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			fixed (byte* pdescription = &description)
			{
				int ret = SessionDisconnectExNative(session, reason, (byte*)pdescription, lang);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			fixed (byte* pdescription = description)
			{
				int ret = SessionDisconnectExNative(session, reason, (byte*)pdescription, lang);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] string description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (description != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(description);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(description, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SessionDisconnectExNative(session, reason, pStr0, lang);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ref byte description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pdescription = &description)
				{
					int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, (byte*)pdescription, lang);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pdescription = description)
				{
					int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, (byte*)pdescription, lang);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] string description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] byte* lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (description != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(description);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(description, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, pStr0, lang);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ref byte lang)
		{
			fixed (byte* plang = &lang)
			{
				int ret = SessionDisconnectExNative(session, reason, description, (byte*)plang);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lang)
		{
			fixed (byte* plang = lang)
			{
				int ret = SessionDisconnectExNative(session, reason, description, (byte*)plang);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] string lang)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lang != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lang);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lang, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SessionDisconnectExNative(session, reason, description, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ref byte lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* plang = &lang)
				{
					int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, description, (byte*)plang);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* plang = lang)
				{
					int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, description, (byte*)plang);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] byte* description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] string lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (lang != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(lang);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(lang, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, description, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ref byte description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ref byte lang)
		{
			fixed (byte* pdescription = &description)
			{
				fixed (byte* plang = &lang)
				{
					int ret = SessionDisconnectExNative(session, reason, (byte*)pdescription, (byte*)plang);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lang)
		{
			fixed (byte* pdescription = description)
			{
				fixed (byte* plang = lang)
				{
					int ret = SessionDisconnectExNative(session, reason, (byte*)pdescription, (byte*)plang);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] string description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] string lang)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (description != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(description);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(description, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (lang != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(lang);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(lang, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SessionDisconnectExNative(session, reason, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ref byte description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ref byte lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pdescription = &description)
				{
					fixed (byte* plang = &lang)
					{
						int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, (byte*)pdescription, (byte*)plang);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pdescription = description)
				{
					fixed (byte* plang = lang)
					{
						int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, (byte*)pdescription, (byte*)plang);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_disconnect_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionDisconnectEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "reason")] [NativeName(NativeNameType.Type, "int")] int reason, [NativeName(NativeNameType.Param, "description")] [NativeName(NativeNameType.Type, "const char*")] string description, [NativeName(NativeNameType.Param, "lang")] [NativeName(NativeNameType.Type, "const char*")] string lang)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (description != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(description);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(description, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (lang != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(lang);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(lang, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SessionDisconnectExNative((Libssh2Session*)psession, reason, pStr0, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_free")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionFreeNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[13])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[13])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_free")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionFree([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = SessionFreeNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_free")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionFree([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionFreeNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_hostkey_hash")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* HostkeyHashNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "hash_type")] [NativeName(NativeNameType.Type, "int")] int hashType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, byte*>)vt[14])(session, hashType);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)vt[14])((nint)session, hashType);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_hostkey_hash")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* HostkeyHash([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "hash_type")] [NativeName(NativeNameType.Type, "int")] int hashType)
		{
			byte* ret = HostkeyHashNative(session, hashType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_hostkey_hash")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string HostkeyHashS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "hash_type")] [NativeName(NativeNameType.Type, "int")] int hashType)
		{
			string ret = Utils.DecodeStringUTF8(HostkeyHashNative(session, hashType));
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_hostkey_hash")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* HostkeyHash([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "hash_type")] [NativeName(NativeNameType.Type, "int")] int hashType)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* ret = HostkeyHashNative((Libssh2Session*)psession, hashType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_hostkey_hash")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string HostkeyHashS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "hash_type")] [NativeName(NativeNameType.Type, "int")] int hashType)
		{
			fixed (Libssh2Session* psession = &session)
			{
				string ret = Utils.DecodeStringUTF8(HostkeyHashNative((Libssh2Session*)psession, hashType));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SessionHostkeyNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, ulong*, int*, byte*>)vt[15])(session, len, type);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)vt[15])((nint)session, (nint)len, (nint)type);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			byte* ret = SessionHostkeyNative(session, len, type);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			string ret = Utils.DecodeStringUTF8(SessionHostkeyNative(session, len, type));
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* ret = SessionHostkeyNative((Libssh2Session*)psession, len, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				string ret = Utils.DecodeStringUTF8(SessionHostkeyNative((Libssh2Session*)psession, len, type));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			fixed (nuint* plen = &len)
			{
				byte* ret = SessionHostkeyNative(session, (ulong*)plen, type);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			fixed (nuint* plen = &len)
			{
				string ret = Utils.DecodeStringUTF8(SessionHostkeyNative(session, (ulong*)plen, type));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* plen = &len)
				{
					byte* ret = SessionHostkeyNative((Libssh2Session*)psession, (ulong*)plen, type);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] int* type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* plen = &len)
				{
					string ret = Utils.DecodeStringUTF8(SessionHostkeyNative((Libssh2Session*)psession, (ulong*)plen, type));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (int* ptype = &type)
			{
				byte* ret = SessionHostkeyNative(session, len, (int*)ptype);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (int* ptype = &type)
			{
				string ret = Utils.DecodeStringUTF8(SessionHostkeyNative(session, len, (int*)ptype));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (int* ptype = &type)
				{
					byte* ret = SessionHostkeyNative((Libssh2Session*)psession, len, (int*)ptype);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ulong* len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (int* ptype = &type)
				{
					string ret = Utils.DecodeStringUTF8(SessionHostkeyNative((Libssh2Session*)psession, len, (int*)ptype));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (nuint* plen = &len)
			{
				fixed (int* ptype = &type)
				{
					byte* ret = SessionHostkeyNative(session, (ulong*)plen, (int*)ptype);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (nuint* plen = &len)
			{
				fixed (int* ptype = &type)
				{
					string ret = Utils.DecodeStringUTF8(SessionHostkeyNative(session, (ulong*)plen, (int*)ptype));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionHostkey([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* plen = &len)
				{
					fixed (int* ptype = &type)
					{
						byte* ret = SessionHostkeyNative((Libssh2Session*)psession, (ulong*)plen, (int*)ptype);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_hostkey")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionHostkeyS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint len, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "int*")] ref int type)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (nuint* plen = &len)
				{
					fixed (int* ptype = &type)
					{
						string ret = Utils.DecodeStringUTF8(SessionHostkeyNative((Libssh2Session*)psession, (ulong*)plen, (int*)ptype));
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionMethodPrefNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] byte* prefs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, byte*, int>)vt[16])(session, methodType, prefs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, int>)vt[16])((nint)session, methodType, (nint)prefs);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] byte* prefs)
		{
			int ret = SessionMethodPrefNative(session, methodType, prefs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] byte* prefs)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionMethodPrefNative((Libssh2Session*)psession, methodType, prefs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] ref byte prefs)
		{
			fixed (byte* pprefs = &prefs)
			{
				int ret = SessionMethodPrefNative(session, methodType, (byte*)pprefs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> prefs)
		{
			fixed (byte* pprefs = prefs)
			{
				int ret = SessionMethodPrefNative(session, methodType, (byte*)pprefs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] string prefs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (prefs != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(prefs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(prefs, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SessionMethodPrefNative(session, methodType, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] ref byte prefs)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprefs = &prefs)
				{
					int ret = SessionMethodPrefNative((Libssh2Session*)psession, methodType, (byte*)pprefs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> prefs)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprefs = prefs)
				{
					int ret = SessionMethodPrefNative((Libssh2Session*)psession, methodType, (byte*)pprefs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_method_pref")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionMethodPref([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType, [NativeName(NativeNameType.Param, "prefs")] [NativeName(NativeNameType.Type, "const char*")] string prefs)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (prefs != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(prefs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(prefs, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SessionMethodPrefNative((Libssh2Session*)psession, methodType, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_methods")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SessionMethodsNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, byte*>)vt[17])(session, methodType);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)vt[17])((nint)session, methodType);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_methods")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionMethods([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType)
		{
			byte* ret = SessionMethodsNative(session, methodType);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_methods")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionMethodsS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType)
		{
			string ret = Utils.DecodeStringUTF8(SessionMethodsNative(session, methodType));
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_methods")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionMethods([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* ret = SessionMethodsNative((Libssh2Session*)psession, methodType);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_methods")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionMethodsS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "method_type")] [NativeName(NativeNameType.Type, "int")] int methodType)
		{
			fixed (Libssh2Session* psession = &session)
			{
				string ret = Utils.DecodeStringUTF8(SessionMethodsNative((Libssh2Session*)psession, methodType));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionLastErrorNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] int* errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte**, int*, int, int>)vt[18])(session, errmsg, errmsgLen, wantBuf);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, int>)vt[18])((nint)session, (nint)errmsg, (nint)errmsgLen, wantBuf);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] int* errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			int ret = SessionLastErrorNative(session, errmsg, errmsgLen, wantBuf);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] int* errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionLastErrorNative((Libssh2Session*)psession, errmsg, errmsgLen, wantBuf);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] int* errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				int ret = SessionLastErrorNative(session, (byte**)perrmsg, errmsgLen, wantBuf);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] int* errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					int ret = SessionLastErrorNative((Libssh2Session*)psession, (byte**)perrmsg, errmsgLen, wantBuf);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] ref int errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (int* perrmsgLen = &errmsgLen)
			{
				int ret = SessionLastErrorNative(session, errmsg, (int*)perrmsgLen, wantBuf);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] byte** errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] ref int errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (int* perrmsgLen = &errmsgLen)
				{
					int ret = SessionLastErrorNative((Libssh2Session*)psession, errmsg, (int*)perrmsgLen, wantBuf);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] ref int errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (byte** perrmsg = &errmsg)
			{
				fixed (int* perrmsgLen = &errmsgLen)
				{
					int ret = SessionLastErrorNative(session, (byte**)perrmsg, (int*)perrmsgLen, wantBuf);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "char**")] ref byte* errmsg, [NativeName(NativeNameType.Param, "errmsg_len")] [NativeName(NativeNameType.Type, "int*")] ref int errmsgLen, [NativeName(NativeNameType.Param, "want_buf")] [NativeName(NativeNameType.Type, "int")] int wantBuf)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** perrmsg = &errmsg)
				{
					fixed (int* perrmsgLen = &errmsgLen)
					{
						int ret = SessionLastErrorNative((Libssh2Session*)psession, (byte**)perrmsg, (int*)perrmsgLen, wantBuf);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_errno")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionLastErrnoNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[19])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[19])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_errno")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastErrno([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = SessionLastErrnoNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_last_errno")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionLastErrno([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionLastErrnoNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionSetLastErrorNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] byte* errmsg)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, byte*, int>)vt[20])(session, errcode, errmsg);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, int>)vt[20])((nint)session, errcode, (nint)errmsg);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] byte* errmsg)
		{
			int ret = SessionSetLastErrorNative(session, errcode, errmsg);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] byte* errmsg)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionSetLastErrorNative((Libssh2Session*)psession, errcode, errmsg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] ref byte errmsg)
		{
			fixed (byte* perrmsg = &errmsg)
			{
				int ret = SessionSetLastErrorNative(session, errcode, (byte*)perrmsg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> errmsg)
		{
			fixed (byte* perrmsg = errmsg)
			{
				int ret = SessionSetLastErrorNative(session, errcode, (byte*)perrmsg);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] string errmsg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (errmsg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(errmsg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(errmsg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SessionSetLastErrorNative(session, errcode, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] ref byte errmsg)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* perrmsg = &errmsg)
				{
					int ret = SessionSetLastErrorNative((Libssh2Session*)psession, errcode, (byte*)perrmsg);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> errmsg)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* perrmsg = errmsg)
				{
					int ret = SessionSetLastErrorNative((Libssh2Session*)psession, errcode, (byte*)perrmsg);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_set_last_error")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionSetLastError([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "errcode")] [NativeName(NativeNameType.Type, "int")] int errcode, [NativeName(NativeNameType.Param, "errmsg")] [NativeName(NativeNameType.Type, "const char*")] string errmsg)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (errmsg != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(errmsg);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(errmsg, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SessionSetLastErrorNative((Libssh2Session*)psession, errcode, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_block_directions")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionBlockDirectionsNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[21])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[21])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_block_directions")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBlockDirections([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = SessionBlockDirectionsNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_block_directions")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionBlockDirections([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionBlockDirectionsNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_flag")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SessionFlagNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, int, int>)vt[22])(session, flag, value);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)vt[22])((nint)session, flag, value);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_flag")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionFlag([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			int ret = SessionFlagNative(session, flag, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_flag")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SessionFlag([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "flag")] [NativeName(NativeNameType.Type, "int")] int flag, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = SessionFlagNative((Libssh2Session*)psession, flag, value);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_get")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* SessionBannerGetNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*>)vt[23])(session);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[23])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_get")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionBannerGet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			byte* ret = SessionBannerGetNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_get")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionBannerGetS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			string ret = Utils.DecodeStringUTF8(SessionBannerGetNative(session));
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_get")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SessionBannerGet([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* ret = SessionBannerGetNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_session_banner_get")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SessionBannerGetS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				string ret = Utils.DecodeStringUTF8(SessionBannerGetNative((Libssh2Session*)psession));
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		internal static byte* UserauthListNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, uint, byte*>)vt[24])(session, username, usernameLen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint>)vt[24])((nint)session, (nint)username, usernameLen);
			#endif
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			byte* ret = UserauthListNative(session, username, usernameLen);
			return ret;
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			string ret = Utils.DecodeStringUTF8(UserauthListNative(session, username, usernameLen));
			return ret;
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* ret = UserauthListNative((Libssh2Session*)psession, username, usernameLen);
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				string ret = Utils.DecodeStringUTF8(UserauthListNative((Libssh2Session*)psession, username, usernameLen));
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (byte* pusername = &username)
			{
				byte* ret = UserauthListNative(session, (byte*)pusername, usernameLen);
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (byte* pusername = &username)
			{
				string ret = Utils.DecodeStringUTF8(UserauthListNative(session, (byte*)pusername, usernameLen));
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (byte* pusername = username)
			{
				byte* ret = UserauthListNative(session, (byte*)pusername, usernameLen);
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (byte* pusername = username)
			{
				string ret = Utils.DecodeStringUTF8(UserauthListNative(session, (byte*)pusername, usernameLen));
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = UserauthListNative(session, pStr0, usernameLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(UserauthListNative(session, pStr0, usernameLen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					byte* ret = UserauthListNative((Libssh2Session*)psession, (byte*)pusername, usernameLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					string ret = Utils.DecodeStringUTF8(UserauthListNative((Libssh2Session*)psession, (byte*)pusername, usernameLen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					byte* ret = UserauthListNative((Libssh2Session*)psession, (byte*)pusername, usernameLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					string ret = Utils.DecodeStringUTF8(UserauthListNative((Libssh2Session*)psession, (byte*)pusername, usernameLen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* UserauthList([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = UserauthListNative((Libssh2Session*)psession, pStr0, usernameLen);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Userauth API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_userauth_list")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string UserauthListS([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(UserauthListNative((Libssh2Session*)psession, pStr0, usernameLen));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_banner")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int UserauthBannerNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "char**")] byte** banner)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte**, int>)vt[25])(session, banner);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[25])((nint)session, (nint)banner);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_banner")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthBanner([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "char**")] byte** banner)
		{
			int ret = UserauthBannerNative(session, banner);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_banner")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthBanner([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "char**")] byte** banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthBannerNative((Libssh2Session*)psession, banner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_banner")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthBanner([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "char**")] ref byte* banner)
		{
			fixed (byte** pbanner = &banner)
			{
				int ret = UserauthBannerNative(session, (byte**)pbanner);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_banner")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthBanner([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "banner")] [NativeName(NativeNameType.Type, "char**")] ref byte* banner)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte** pbanner = &banner)
				{
					int ret = UserauthBannerNative((Libssh2Session*)psession, (byte**)pbanner);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_authenticated")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int UserauthAuthenticatedNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int>)vt[26])(session);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[26])((nint)session);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_authenticated")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthAuthenticated([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			int ret = UserauthAuthenticatedNative(session);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_authenticated")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthAuthenticated([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthAuthenticatedNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int UserauthPasswordExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void>, int>)vt[27])(session, username, usernameLen, password, passwordLen, passwdChangeCb);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, nint, int>)vt[27])((nint)session, (nint)username, usernameLen, (nint)password, passwordLen, (nint)passwdChangeCb);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			int ret = UserauthPasswordExNative(session, username, usernameLen, password, passwordLen, passwdChangeCb);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPasswordExNative((Libssh2Session*)psession, username, usernameLen, password, passwordLen, passwdChangeCb);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPasswordExNative(session, (byte*)pusername, usernameLen, password, passwordLen, passwdChangeCb);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPasswordExNative(session, (byte*)pusername, usernameLen, password, passwordLen, passwdChangeCb);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPasswordExNative(session, pStr0, usernameLen, password, passwordLen, passwdChangeCb);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPasswordExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, password, passwordLen, passwdChangeCb);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPasswordExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, password, passwordLen, passwdChangeCb);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] byte* password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPasswordExNative((Libssh2Session*)psession, pStr0, usernameLen, password, passwordLen, passwdChangeCb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ref byte password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (byte* ppassword = &password)
			{
				int ret = UserauthPasswordExNative(session, username, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (byte* ppassword = password)
			{
				int ret = UserauthPasswordExNative(session, username, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] string password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (password != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(password);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(password, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPasswordExNative(session, username, usernameLen, pStr0, passwordLen, passwdChangeCb);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ref byte password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassword = &password)
				{
					int ret = UserauthPasswordExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassword = password)
				{
					int ret = UserauthPasswordExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] string password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (password != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(password);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(password, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPasswordExNative((Libssh2Session*)psession, username, usernameLen, pStr0, passwordLen, passwdChangeCb);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ref byte password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassword = &password)
				{
					int ret = UserauthPasswordExNative(session, (byte*)pusername, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassword = password)
				{
					int ret = UserauthPasswordExNative(session, (byte*)pusername, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] string password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (password != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(password);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(password, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPasswordExNative(session, pStr0, usernameLen, pStr1, passwordLen, passwdChangeCb);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ref byte password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassword = &password)
					{
						int ret = UserauthPasswordExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassword = password)
					{
						int ret = UserauthPasswordExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppassword, passwordLen, passwdChangeCb);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_password_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPasswordEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "password")] [NativeName(NativeNameType.Type, "const char*")] string password, [NativeName(NativeNameType.Param, "password_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint passwordLen, [NativeName(NativeNameType.Param, "passwd_change_cb")] [NativeName(NativeNameType.Type, "void (*)(LIBSSH2_SESSION* session, const char* username, unsigned int username_len, const char* password, unsigned int password_len, void (*)(LIBSSH2_SESSION* session, char** newpw, int* newpw_len, void** abstract)* passwd_change_cb)*")] delegate*<Libssh2Session*, byte*, uint, byte*, uint, delegate*<Libssh2Session*, byte**, int*, void**, void>, void> passwdChangeCb)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (password != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(password);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(password, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPasswordExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, passwordLen, passwdChangeCb);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int UserauthPublickeyFromfileExNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, byte*, uint, byte*, byte*, byte*, int>)vt[28])(session, username, usernameLen, publickey, privatekey, passphrase);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, nint, nint, int>)vt[28])((nint)session, (nint)username, usernameLen, (nint)publickey, (nint)privatekey, (nint)passphrase);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, privatekey, passphrase);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = &username)
			{
				int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = username)
			{
				int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, pStr0, usernameLen, publickey, privatekey, passphrase);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, privatekey, passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* ppublickey = &publickey)
			{
				int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* ppublickey = publickey)
			{
				int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, pStr0, privatekey, passphrase);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, privatekey, passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, pStr0, usernameLen, pStr1, privatekey, passphrase);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, privatekey, passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pprivatekey = &privatekey)
			{
				int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pprivatekey = privatekey)
			{
				int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, passphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, pStr0, passphrase);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, (byte*)pprivatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (privatekey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, pStr0, passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, pStr0, usernameLen, publickey, pStr1, passphrase);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, (byte*)pprivatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, pStr1, passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* pprivatekey = &privatekey)
				{
					int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* pprivatekey = privatekey)
				{
					int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (privatekey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, pStr0, pStr1, passphrase);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (privatekey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(privatekey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, pStr1, passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* pprivatekey = &privatekey)
					{
						int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* pprivatekey = privatekey)
					{
						int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (privatekey != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, pStr0, usernameLen, pStr1, pStr2, passphrase);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* pprivatekey = &privatekey)
						{
							int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* pprivatekey = privatekey)
						{
							int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, (byte*)pprivatekey, passphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] byte* passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (privatekey != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(privatekey);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(privatekey, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, pStr2, passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppassphrase = &passphrase)
			{
				int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, privatekey, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppassphrase = passphrase)
			{
				int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, privatekey, (byte*)ppassphrase);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (passphrase != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, privatekey, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (passphrase != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(passphrase, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, publickey, privatekey, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, pStr0, usernameLen, publickey, privatekey, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, publickey, privatekey, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, publickey, privatekey, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* ppublickey = &publickey)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* ppublickey = publickey)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (publickey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, pStr0, privatekey, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (publickey != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(publickey, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (passphrase != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, username, usernameLen, pStr0, privatekey, pStr1);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pusername = &username)
			{
				fixed (byte* ppublickey = &publickey)
				{
					fixed (byte* ppassphrase = &passphrase)
					{
						int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pusername = username)
			{
				fixed (byte* ppublickey = publickey)
				{
					fixed (byte* ppassphrase = passphrase)
					{
						int ret = UserauthPublickeyFromfileExNative(session, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (username != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(username);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (publickey != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(publickey);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (passphrase != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, pStr0, usernameLen, pStr1, privatekey, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ref byte username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ref byte publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = &username)
				{
					fixed (byte* ppublickey = &publickey)
					{
						fixed (byte* ppassphrase = &passphrase)
						{
							int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (byte* pusername = username)
				{
					fixed (byte* ppublickey = publickey)
					{
						fixed (byte* ppassphrase = passphrase)
						{
							int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, (byte*)pusername, usernameLen, (byte*)ppublickey, privatekey, (byte*)ppassphrase);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] string username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] string publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] byte* privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			fixed (Libssh2Session* psession = &session)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (username != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(username);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(username, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (publickey != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(publickey);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(publickey, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (passphrase != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(passphrase);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(passphrase, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = UserauthPublickeyFromfileExNative((Libssh2Session*)psession, pStr0, usernameLen, pStr1, privatekey, pStr2);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ref byte privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ref byte passphrase)
		{
			fixed (byte* pprivatekey = &privatekey)
			{
				fixed (byte* ppassphrase = &passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> passphrase)
		{
			fixed (byte* pprivatekey = privatekey)
			{
				fixed (byte* ppassphrase = passphrase)
				{
					int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, (byte*)pprivatekey, (byte*)ppassphrase);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_userauth_publickey_fromfile_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UserauthPublickeyFromfileEx([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "username")] [NativeName(NativeNameType.Type, "const char*")] byte* username, [NativeName(NativeNameType.Param, "username_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint usernameLen, [NativeName(NativeNameType.Param, "publickey")] [NativeName(NativeNameType.Type, "const char*")] byte* publickey, [NativeName(NativeNameType.Param, "privatekey")] [NativeName(NativeNameType.Type, "const char*")] string privatekey, [NativeName(NativeNameType.Param, "passphrase")] [NativeName(NativeNameType.Type, "const char*")] string passphrase)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (privatekey != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(privatekey);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(privatekey, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (passphrase != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(passphrase);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(passphrase, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = UserauthPublickeyFromfileExNative(session, username, usernameLen, publickey, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
