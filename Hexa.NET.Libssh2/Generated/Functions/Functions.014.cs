// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (key != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(key);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, pStr0, keylen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, salt, pStr1, keylen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, pStr1, keylen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddNative(hosts, host, pStr0, pStr1, keylen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, pStr1, keylen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (key != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(key);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = KnownhostAddNative(hosts, pStr0, pStr1, pStr2, keylen, typemask, store);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (byte* pkey = &key)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (byte* pkey = key)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, store);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (key != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(key);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, pStr2, keylen, typemask, store);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, pStr0, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, pStr1, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* pkey = &key)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* pkey = key)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (key != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(key);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, salt, pStr0, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (key != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(key);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, pStr0, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, salt, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, pStr0, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (key != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(key);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, pStr1, pStr2, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (byte* pkey = &key)
						{
							fixed (Libssh2Knownhost** pstore = &store)
							{
								int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (byte* pkey = key)
						{
							fixed (Libssh2Knownhost** pstore = &store)
							{
								int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (key != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(key);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, pStr2, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, pStr0, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, pStr1, key, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, key, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* pkey = &key)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* pkey = key)
			{
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative(hosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (key != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(key);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, salt, pStr0, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (key != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(key);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, salt, pStr0, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, salt, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, salt, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (byte* pkey = &key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (byte* pkey = key)
				{
					fixed (Libssh2Knownhost** pstore = &store)
					{
						int ret = KnownhostAddNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, host, pStr0, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, host, pStr0, pStr1, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						fixed (Libssh2Knownhost** pstore = &store)
						{
							int ret = KnownhostAddNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (key != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(key);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			fixed (Libssh2Knownhost** pstore = &store)
			{
				int ret = KnownhostAddNative(hosts, pStr0, pStr1, pStr2, keylen, typemask, (Libssh2Knownhost**)pstore);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr2);
				}
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (byte* pkey = &key)
						{
							fixed (Libssh2Knownhost** pstore = &store)
							{
								int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (byte* pkey = key)
						{
							fixed (Libssh2Knownhost** pstore = &store)
							{
								int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, typemask, (Libssh2Knownhost**)pstore);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_knownhost_add")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAdd([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] nuint keylen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] ref Libssh2Knownhost* store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte* pStr2 = null;
				int pStrSize2 = 0;
				if (key != null)
				{
					pStrSize2 = Utils.GetByteCountUTF8(key);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
					}
					else
					{
						byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
						pStr2 = pStrStack2;
					}
					int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
					pStr2[pStrOffset2] = 0;
				}
				fixed (Libssh2Knownhost** pstore = &store)
				{
					int ret = KnownhostAddNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, pStr2, keylen, typemask, (Libssh2Knownhost**)pstore);
					if (pStrSize2 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr2);
					}
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KnownhostAddcNative([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Knownhosts*, byte*, byte*, byte*, ulong, byte*, ulong, int, Libssh2Knownhost**, int>)vt[82])(hosts, host, salt, key, keylen, comment, commentlen, typemask, store);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, ulong, nint, ulong, int, nint, int>)vt[82])((nint)hosts, (nint)host, (nint)salt, (nint)key, keylen, (nint)comment, commentlen, typemask, (nint)store);
			#endif
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			int ret = KnownhostAddcNative(hosts, host, salt, key, keylen, comment, commentlen, typemask, store);
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, salt, key, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				int ret = KnownhostAddcNative(hosts, (byte*)phost, salt, key, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				int ret = KnownhostAddcNative(hosts, (byte*)phost, salt, key, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddcNative(hosts, pStr0, salt, key, keylen, comment, commentlen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, key, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, pStr0, salt, key, keylen, comment, commentlen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = &salt)
			{
				int ret = KnownhostAddcNative(hosts, host, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = salt)
			{
				int ret = KnownhostAddcNative(hosts, host, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddcNative(hosts, host, pStr0, key, keylen, comment, commentlen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, pStr0, key, keylen, comment, commentlen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					int ret = KnownhostAddcNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					int ret = KnownhostAddcNative(hosts, (byte*)phost, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddcNative(hosts, pStr0, pStr1, key, keylen, comment, commentlen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, key, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] byte* key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (salt != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(salt);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, pStr0, pStr1, key, keylen, comment, commentlen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* pkey = &key)
			{
				int ret = KnownhostAddcNative(hosts, host, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* pkey = key)
			{
				int ret = KnownhostAddcNative(hosts, host, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (key != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(key);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = KnownhostAddcNative(hosts, host, salt, pStr0, keylen, comment, commentlen, typemask, store);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (key != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(key);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(key, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, salt, pStr0, keylen, comment, commentlen, typemask, store);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddcNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddcNative(hosts, (byte*)phost, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddcNative(hosts, pStr0, salt, pStr1, keylen, comment, commentlen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, salt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] byte* salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (host != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(host);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, pStr0, salt, pStr1, keylen, comment, commentlen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = &salt)
			{
				fixed (byte* pkey = &key)
				{
					int ret = KnownhostAddcNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* psalt = salt)
			{
				fixed (byte* pkey = key)
				{
					int ret = KnownhostAddcNative(hosts, host, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
					return ret;
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (salt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(salt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (key != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(key);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = KnownhostAddcNative(hosts, host, pStr0, pStr1, keylen, comment, commentlen, typemask, store);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] byte* host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (salt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(salt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(salt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (key != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(key);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(key, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, host, pStr0, pStr1, keylen, comment, commentlen, typemask, store);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = &host)
			{
				fixed (byte* psalt = &salt)
				{
					fixed (byte* pkey = &key)
					{
						int ret = KnownhostAddcNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (byte* phost = host)
			{
				fixed (byte* psalt = salt)
				{
					fixed (byte* pkey = key)
					{
						int ret = KnownhostAddcNative(hosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] Libssh2Knownhosts* hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] string host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] string salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] string key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (host != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(host);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(host, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (salt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(salt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(salt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (key != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(key);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(key, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			int ret = KnownhostAddcNative(hosts, pStr0, pStr1, pStr2, keylen, comment, commentlen, typemask, store);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ref byte host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ref byte salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ref byte key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = &host)
				{
					fixed (byte* psalt = &salt)
					{
						fixed (byte* pkey = &key)
						{
							int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_knownhost_addc()<br/>
		/// Add a host and its associated key to the collection of known hosts.<br/>
		/// Takes a comment argument that may be NULL.  A NULL comment indicates<br/>
		/// there is no comment and the entry will end directly after the key<br/>
		/// when written out to a file.  An empty string "" comment will indicate an<br/>
		/// empty comment which will cause a single space to be written after the key.<br/>
		/// The 'type' argument specifies on what format the given host and keys are:<br/>
		/// plain  - ascii "hostname.domain.tld"<br/>
		/// sha1   - SHA1(<br/>
		/// <salt<br/>
		/// > <br/>
		/// <host<br/>
		/// >) base64-encoded!<br/>
		/// custom - another hash<br/>
		/// If 'sha1' is selected as type, the salt must be provided to the salt<br/>
		/// argument. This too base64 encoded.<br/>
		/// The SHA-1 hash is what OpenSSH can be told to use in known_hosts files.<br/>
		/// If a custom type is used, salt is ignored and you must provide the host<br/>
		/// pre-hashed when checking for it in the libssh2_knownhost_check() function.<br/>
		/// The keylen parameter may be omitted (zero) if the key is provided as a<br/>
		/// NULL-terminated base64-encoded string.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_knownhost_addc")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KnownhostAddc([NativeName(NativeNameType.Param, "hosts")] [NativeName(NativeNameType.Type, "LIBSSH2_KNOWNHOSTS*")] ref Libssh2Knownhosts hosts, [NativeName(NativeNameType.Param, "host")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> host, [NativeName(NativeNameType.Param, "salt")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> salt, [NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> key, [NativeName(NativeNameType.Param, "keylen")] [NativeName(NativeNameType.Type, "size_t")] ulong keylen, [NativeName(NativeNameType.Param, "comment")] [NativeName(NativeNameType.Type, "const char*")] byte* comment, [NativeName(NativeNameType.Param, "commentlen")] [NativeName(NativeNameType.Type, "size_t")] ulong commentlen, [NativeName(NativeNameType.Param, "typemask")] [NativeName(NativeNameType.Type, "int")] int typemask, [NativeName(NativeNameType.Param, "store")] [NativeName(NativeNameType.Type, "libssh2_knownhost**")] Libssh2Knownhost** store)
		{
			fixed (Libssh2Knownhosts* phosts = &hosts)
			{
				fixed (byte* phost = host)
				{
					fixed (byte* psalt = salt)
					{
						fixed (byte* pkey = key)
						{
							int ret = KnownhostAddcNative((Libssh2Knownhosts*)phosts, (byte*)phost, (byte*)psalt, (byte*)pkey, keylen, comment, commentlen, typemask, store);
							return ret;
						}
					}
				}
			}
		}
	}
}
