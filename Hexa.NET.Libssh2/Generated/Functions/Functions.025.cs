// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	public unsafe partial class Libssh2
	{

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] byte** sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, sig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = &method)
						{
							int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						fixed (byte* pmethod = method)
						{
							int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (byte** psig = &sig)
			{
				fixed (nuint* psLen = &sLen)
				{
					fixed (byte* pdata = &data)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (method != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(method);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						int ret = AgentSignNative(agent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] Libssh2AgentPublickey* identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative((Libssh2Agent*)pagent, identity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = &method)
							{
								int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							fixed (byte* pmethod = method)
							{
								int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2AgentPublickey* pidentity = &identity)
			{
				fixed (byte** psig = &sig)
				{
					fixed (nuint* psLen = &sLen)
					{
						fixed (byte* pdata = &data)
						{
							byte* pStr0 = null;
							int pStrSize0 = 0;
							if (method != null)
							{
								pStrSize0 = Utils.GetByteCountUTF8(method);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
								}
								else
								{
									byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
									pStr0 = pStrStack0;
								}
								int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
								pStr0[pStrOffset0] = 0;
							}
							int ret = AgentSignNative(agent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								Utils.Free(pStr0);
							}
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ref byte method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								fixed (byte* pmethod = &method)
								{
									int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								fixed (byte* pmethod = method)
								{
									int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, (byte*)pmethod, methodLen);
									return ret;
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_sign()<br/>
		/// Sign a payload using a system-installed ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_sign")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentSign([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "identity")] [NativeName(NativeNameType.Type, "libssh2_agent_publickey*")] ref Libssh2AgentPublickey identity, [NativeName(NativeNameType.Param, "sig")] [NativeName(NativeNameType.Type, "unsigned char**")] ref byte* sig, [NativeName(NativeNameType.Param, "s_len")] [NativeName(NativeNameType.Type, "size_t*")] ref nuint sLen, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte data, [NativeName(NativeNameType.Param, "d_len")] [NativeName(NativeNameType.Type, "size_t")] nuint dLen, [NativeName(NativeNameType.Param, "method")] [NativeName(NativeNameType.Type, "const char*")] string method, [NativeName(NativeNameType.Param, "method_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint methodLen)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (Libssh2AgentPublickey* pidentity = &identity)
				{
					fixed (byte** psig = &sig)
					{
						fixed (nuint* psLen = &sLen)
						{
							fixed (byte* pdata = &data)
							{
								byte* pStr0 = null;
								int pStrSize0 = 0;
								if (method != null)
								{
									pStrSize0 = Utils.GetByteCountUTF8(method);
									if (pStrSize0 >= Utils.MaxStackallocSize)
									{
										pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
									}
									else
									{
										byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
										pStr0 = pStrStack0;
									}
									int pStrOffset0 = Utils.EncodeStringUTF8(method, pStr0, pStrSize0);
									pStr0[pStrOffset0] = 0;
								}
								int ret = AgentSignNative((Libssh2Agent*)pagent, (Libssh2AgentPublickey*)pidentity, (byte**)psig, (ulong*)psLen, (byte*)pdata, dLen, pStr0, methodLen);
								if (pStrSize0 >= Utils.MaxStackallocSize)
								{
									Utils.Free(pStr0);
								}
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// libssh2_agent_disconnect()<br/>
		/// Close a connection to an ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_disconnect")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int AgentDisconnectNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, int>)vt[98])(agent);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[98])((nint)agent);
			#endif
		}

		/// <summary>
		/// libssh2_agent_disconnect()<br/>
		/// Close a connection to an ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_disconnect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentDisconnect([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			int ret = AgentDisconnectNative(agent);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_disconnect()<br/>
		/// Close a connection to an ssh-agent.<br/>
		/// Returns 0 if succeeded, or a negative value for error.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_disconnect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AgentDisconnect([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				int ret = AgentDisconnectNative((Libssh2Agent*)pagent);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_free()<br/>
		/// Free an ssh-agent handle.  This function also frees the internal<br/>
		/// collection of public keys.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AgentFreeNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Agent*, void>)vt[99])(agent);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)vt[99])((nint)agent);
			#endif
		}

		/// <summary>
		/// libssh2_agent_free()<br/>
		/// Free an ssh-agent handle.  This function also frees the internal<br/>
		/// collection of public keys.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentFree([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			AgentFreeNative(agent);
		}

		/// <summary>
		/// libssh2_agent_free()<br/>
		/// Free an ssh-agent handle.  This function also frees the internal<br/>
		/// collection of public keys.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentFree([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				AgentFreeNative((Libssh2Agent*)pagent);
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void AgentSetIdentityPathNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Agent*, byte*, void>)vt[100])(agent, path);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[100])((nint)agent, (nint)path);
			#endif
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path)
		{
			AgentSetIdentityPathNative(agent, path);
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] byte* path)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				AgentSetIdentityPathNative((Libssh2Agent*)pagent, path);
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path)
		{
			fixed (byte* ppath = &path)
			{
				AgentSetIdentityPathNative(agent, (byte*)ppath);
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path)
		{
			fixed (byte* ppath = path)
			{
				AgentSetIdentityPathNative(agent, (byte*)ppath);
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			AgentSetIdentityPathNative(agent, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ref byte path)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* ppath = &path)
				{
					AgentSetIdentityPathNative((Libssh2Agent*)pagent, (byte*)ppath);
				}
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> path)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				fixed (byte* ppath = path)
				{
					AgentSetIdentityPathNative((Libssh2Agent*)pagent, (byte*)ppath);
				}
			}
		}

		/// <summary>
		/// libssh2_agent_set_identity_path()<br/>
		/// Allows a custom agent identity socket path beyond SSH_AUTH_SOCK env<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_set_identity_path")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AgentSetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "const char*")] string path)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (path != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(path);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				AgentSetIdentityPathNative((Libssh2Agent*)pagent, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity_path()<br/>
		/// Returns the custom agent identity socket path if set<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity_path")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		internal static byte* AgentGetIdentityPathNative([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Agent*, byte*>)vt[101])(agent);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[101])((nint)agent);
			#endif
		}

		/// <summary>
		/// libssh2_agent_get_identity_path()<br/>
		/// Returns the custom agent identity socket path if set<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity_path")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* AgentGetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			byte* ret = AgentGetIdentityPathNative(agent);
			return ret;
		}

		/// <summary>
		/// libssh2_agent_get_identity_path()<br/>
		/// Returns the custom agent identity socket path if set<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity_path")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string AgentGetIdentityPathS([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] Libssh2Agent* agent)
		{
			string ret = Utils.DecodeStringUTF8(AgentGetIdentityPathNative(agent));
			return ret;
		}

		/// <summary>
		/// libssh2_agent_get_identity_path()<br/>
		/// Returns the custom agent identity socket path if set<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity_path")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* AgentGetIdentityPath([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				byte* ret = AgentGetIdentityPathNative((Libssh2Agent*)pagent);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_agent_get_identity_path()<br/>
		/// Returns the custom agent identity socket path if set<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_agent_get_identity_path")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string AgentGetIdentityPathS([NativeName(NativeNameType.Param, "agent")] [NativeName(NativeNameType.Type, "LIBSSH2_AGENT*")] ref Libssh2Agent agent)
		{
			fixed (Libssh2Agent* pagent = &agent)
			{
				string ret = Utils.DecodeStringUTF8(AgentGetIdentityPathNative((Libssh2Agent*)pagent));
				return ret;
			}
		}

		/// <summary>
		/// libssh2_keepalive_config()<br/>
		/// Set how often keepalive messages should be sent.  WANT_REPLY<br/>
		/// indicates whether the keepalive messages should request a response<br/>
		/// from the server.  INTERVAL is number of seconds that can pass<br/>
		/// without any I/O, use 0 (the default) to disable keepalives.  To<br/>
		/// avoid some busy-loop corner-cases, if you specify an interval of 1<br/>
		/// it will be treated as 2.<br/>
		/// Note that non-blocking applications are responsible for sending the<br/>
		/// keepalive messages using libssh2_keepalive_send().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_config")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void KeepaliveConfigNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "want_reply")] [NativeName(NativeNameType.Type, "int")] int wantReply, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "unsigned int")] uint interval)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Session*, int, uint, void>)vt[102])(session, wantReply, interval);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, uint, void>)vt[102])((nint)session, wantReply, interval);
			#endif
		}

		/// <summary>
		/// libssh2_keepalive_config()<br/>
		/// Set how often keepalive messages should be sent.  WANT_REPLY<br/>
		/// indicates whether the keepalive messages should request a response<br/>
		/// from the server.  INTERVAL is number of seconds that can pass<br/>
		/// without any I/O, use 0 (the default) to disable keepalives.  To<br/>
		/// avoid some busy-loop corner-cases, if you specify an interval of 1<br/>
		/// it will be treated as 2.<br/>
		/// Note that non-blocking applications are responsible for sending the<br/>
		/// keepalive messages using libssh2_keepalive_send().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_config")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void KeepaliveConfig([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "want_reply")] [NativeName(NativeNameType.Type, "int")] int wantReply, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "unsigned int")] uint interval)
		{
			KeepaliveConfigNative(session, wantReply, interval);
		}

		/// <summary>
		/// libssh2_keepalive_config()<br/>
		/// Set how often keepalive messages should be sent.  WANT_REPLY<br/>
		/// indicates whether the keepalive messages should request a response<br/>
		/// from the server.  INTERVAL is number of seconds that can pass<br/>
		/// without any I/O, use 0 (the default) to disable keepalives.  To<br/>
		/// avoid some busy-loop corner-cases, if you specify an interval of 1<br/>
		/// it will be treated as 2.<br/>
		/// Note that non-blocking applications are responsible for sending the<br/>
		/// keepalive messages using libssh2_keepalive_send().<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_config")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void KeepaliveConfig([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "want_reply")] [NativeName(NativeNameType.Type, "int")] int wantReply, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "unsigned int")] uint interval)
		{
			fixed (Libssh2Session* psession = &session)
			{
				KeepaliveConfigNative((Libssh2Session*)psession, wantReply, interval);
			}
		}

		/// <summary>
		/// libssh2_keepalive_send()<br/>
		/// Send a keepalive message if needed.  SECONDS_TO_NEXT indicates how<br/>
		/// many seconds you can sleep after this call before you need to call<br/>
		/// it again.  Returns 0 on success, or LIBSSH2_ERROR_SOCKET_SEND on<br/>
		/// I/O errors.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_send")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int KeepaliveSendNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "seconds_to_next")] [NativeName(NativeNameType.Type, "int*")] int* secondsToNext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int*, int>)vt[103])(session, secondsToNext);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)vt[103])((nint)session, (nint)secondsToNext);
			#endif
		}

		/// <summary>
		/// libssh2_keepalive_send()<br/>
		/// Send a keepalive message if needed.  SECONDS_TO_NEXT indicates how<br/>
		/// many seconds you can sleep after this call before you need to call<br/>
		/// it again.  Returns 0 on success, or LIBSSH2_ERROR_SOCKET_SEND on<br/>
		/// I/O errors.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_send")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KeepaliveSend([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "seconds_to_next")] [NativeName(NativeNameType.Type, "int*")] int* secondsToNext)
		{
			int ret = KeepaliveSendNative(session, secondsToNext);
			return ret;
		}

		/// <summary>
		/// libssh2_keepalive_send()<br/>
		/// Send a keepalive message if needed.  SECONDS_TO_NEXT indicates how<br/>
		/// many seconds you can sleep after this call before you need to call<br/>
		/// it again.  Returns 0 on success, or LIBSSH2_ERROR_SOCKET_SEND on<br/>
		/// I/O errors.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_send")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KeepaliveSend([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "seconds_to_next")] [NativeName(NativeNameType.Type, "int*")] int* secondsToNext)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = KeepaliveSendNative((Libssh2Session*)psession, secondsToNext);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_keepalive_send()<br/>
		/// Send a keepalive message if needed.  SECONDS_TO_NEXT indicates how<br/>
		/// many seconds you can sleep after this call before you need to call<br/>
		/// it again.  Returns 0 on success, or LIBSSH2_ERROR_SOCKET_SEND on<br/>
		/// I/O errors.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_send")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KeepaliveSend([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "seconds_to_next")] [NativeName(NativeNameType.Type, "int*")] ref int secondsToNext)
		{
			fixed (int* psecondsToNext = &secondsToNext)
			{
				int ret = KeepaliveSendNative(session, (int*)psecondsToNext);
				return ret;
			}
		}

		/// <summary>
		/// libssh2_keepalive_send()<br/>
		/// Send a keepalive message if needed.  SECONDS_TO_NEXT indicates how<br/>
		/// many seconds you can sleep after this call before you need to call<br/>
		/// it again.  Returns 0 on success, or LIBSSH2_ERROR_SOCKET_SEND on<br/>
		/// I/O errors.<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_keepalive_send")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int KeepaliveSend([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "seconds_to_next")] [NativeName(NativeNameType.Type, "int*")] ref int secondsToNext)
		{
			fixed (Libssh2Session* psession = &session)
			{
				fixed (int* psecondsToNext = &secondsToNext)
				{
					int ret = KeepaliveSendNative((Libssh2Session*)psession, (int*)psecondsToNext);
					return ret;
				}
			}
		}

		/// <summary>
		/// NOTE NOTE NOTE<br/>
		/// libssh2_trace() has no function in builds that aren't built with debug<br/>
		/// enabled<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_trace")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TraceNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "bitmask")] [NativeName(NativeNameType.Type, "int")] int bitmask)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, int, int>)vt[104])(session, bitmask);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)vt[104])((nint)session, bitmask);
			#endif
		}

		/// <summary>
		/// NOTE NOTE NOTE<br/>
		/// libssh2_trace() has no function in builds that aren't built with debug<br/>
		/// enabled<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_trace")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Trace([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "bitmask")] [NativeName(NativeNameType.Type, "int")] int bitmask)
		{
			int ret = TraceNative(session, bitmask);
			return ret;
		}

		/// <summary>
		/// NOTE NOTE NOTE<br/>
		/// libssh2_trace() has no function in builds that aren't built with debug<br/>
		/// enabled<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_trace")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Trace([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "bitmask")] [NativeName(NativeNameType.Type, "int")] int bitmask)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = TraceNative((Libssh2Session*)psession, bitmask);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_trace_sethandler")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int TraceSethandlerNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "libssh2_trace_handler_func")] Libssh2TraceHandlerFunc callback)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, void*, delegate*<Libssh2Session*, void*, byte*, ulong, void>, int>)vt[105])(session, context, (delegate*<Libssh2Session*, void*, byte*, ulong, void>)Utils.GetFunctionPointerForDelegate(callback));
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[105])((nint)session, (nint)context, (nint)Utils.GetFunctionPointerForDelegate(callback));
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_trace_sethandler")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TraceSethandler([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "libssh2_trace_handler_func")] Libssh2TraceHandlerFunc callback)
		{
			int ret = TraceSethandlerNative(session, context, callback);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_trace_sethandler")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int TraceSethandler([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session, [NativeName(NativeNameType.Param, "context")] [NativeName(NativeNameType.Type, "void*")] void* context, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "libssh2_trace_handler_func")] Libssh2TraceHandlerFunc callback)
		{
			fixed (Libssh2Session* psession = &session)
			{
				int ret = TraceSethandlerNative((Libssh2Session*)psession, context, callback);
				return ret;
			}
		}

		/// <summary>
		/// Publickey Subsystem <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_publickey_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")]
		internal static Libssh2Publickey* PublickeyInitNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, Libssh2Publickey*>)vt[106])(session);
			#else
			return (Libssh2Publickey*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[106])((nint)session);
			#endif
		}

		/// <summary>
		/// Publickey Subsystem <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_publickey_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")]
		public static Libssh2Publickey* PublickeyInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			Libssh2Publickey* ret = PublickeyInitNative(session);
			return ret;
		}

		/// <summary>
		/// Publickey Subsystem <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_publickey_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")]
		public static Libssh2Publickey* PublickeyInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Publickey* ret = PublickeyInitNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int PublickeyAddExNative([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Publickey*, byte*, uint, byte*, uint, byte, uint, Libssh2PublickeyAttribute*, int>)vt[107])(pkey, name, nameLen, blob, blobLen, overwrite, numAttrs, attrs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, byte, uint, nint, int>)vt[107])((nint)pkey, (nint)name, nameLen, (nint)blob, blobLen, overwrite, numAttrs, (nint)attrs);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			int ret = PublickeyAddExNative(pkey, name, nameLen, blob, blobLen, overwrite, numAttrs, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				int ret = PublickeyAddExNative((Libssh2Publickey*)ppkey, name, nameLen, blob, blobLen, overwrite, numAttrs, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (byte* pname = &name)
			{
				int ret = PublickeyAddExNative(pkey, (byte*)pname, nameLen, blob, blobLen, overwrite, numAttrs, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (byte* pname = &name)
				{
					int ret = PublickeyAddExNative((Libssh2Publickey*)ppkey, (byte*)pname, nameLen, blob, blobLen, overwrite, numAttrs, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (byte* pblob = &blob)
			{
				int ret = PublickeyAddExNative(pkey, name, nameLen, (byte*)pblob, blobLen, overwrite, numAttrs, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (byte* pblob = &blob)
				{
					int ret = PublickeyAddExNative((Libssh2Publickey*)ppkey, name, nameLen, (byte*)pblob, blobLen, overwrite, numAttrs, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pblob = &blob)
				{
					int ret = PublickeyAddExNative(pkey, (byte*)pname, nameLen, (byte*)pblob, blobLen, overwrite, numAttrs, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_add_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyAddEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "char")] byte overwrite, [NativeName(NativeNameType.Param, "num_attrs")] [NativeName(NativeNameType.Type, "unsigned int")] uint numAttrs, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "const libssh2_publickey_attribute[-1]")] Libssh2PublickeyAttribute* attrs)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (byte* pname = &name)
				{
					fixed (byte* pblob = &blob)
					{
						int ret = PublickeyAddExNative((Libssh2Publickey*)ppkey, (byte*)pname, nameLen, (byte*)pblob, blobLen, overwrite, numAttrs, attrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int PublickeyRemoveExNative([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Publickey*, byte*, uint, byte*, uint, int>)vt[108])(pkey, name, nameLen, blob, blobLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, uint, int>)vt[108])((nint)pkey, (nint)name, nameLen, (nint)blob, blobLen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			int ret = PublickeyRemoveExNative(pkey, name, nameLen, blob, blobLen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				int ret = PublickeyRemoveExNative((Libssh2Publickey*)ppkey, name, nameLen, blob, blobLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (byte* pname = &name)
			{
				int ret = PublickeyRemoveExNative(pkey, (byte*)pname, nameLen, blob, blobLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (byte* pname = &name)
				{
					int ret = PublickeyRemoveExNative((Libssh2Publickey*)ppkey, (byte*)pname, nameLen, blob, blobLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (byte* pblob = &blob)
			{
				int ret = PublickeyRemoveExNative(pkey, name, nameLen, (byte*)pblob, blobLen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (byte* pblob = &blob)
				{
					int ret = PublickeyRemoveExNative((Libssh2Publickey*)ppkey, name, nameLen, (byte*)pblob, blobLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pblob = &blob)
				{
					int ret = PublickeyRemoveExNative(pkey, (byte*)pname, nameLen, (byte*)pblob, blobLen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_remove_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyRemoveEx([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte name, [NativeName(NativeNameType.Param, "name_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint nameLen, [NativeName(NativeNameType.Param, "blob")] [NativeName(NativeNameType.Type, "const unsigned char*")] ref byte blob, [NativeName(NativeNameType.Param, "blob_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint blobLen)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (byte* pname = &name)
				{
					fixed (byte* pblob = &blob)
					{
						int ret = PublickeyRemoveExNative((Libssh2Publickey*)ppkey, (byte*)pname, nameLen, (byte*)pblob, blobLen);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int PublickeyListFetchNative([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] Libssh2PublickeyList** pkeyList)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Publickey*, uint*, Libssh2PublickeyList**, int>)vt[109])(pkey, numKeys, pkeyList);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)vt[109])((nint)pkey, (nint)numKeys, (nint)pkeyList);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] Libssh2PublickeyList** pkeyList)
		{
			int ret = PublickeyListFetchNative(pkey, numKeys, pkeyList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] Libssh2PublickeyList** pkeyList)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				int ret = PublickeyListFetchNative((Libssh2Publickey*)ppkey, numKeys, pkeyList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] Libssh2PublickeyList** pkeyList)
		{
			fixed (uint* pnumKeys = &numKeys)
			{
				int ret = PublickeyListFetchNative(pkey, (uint*)pnumKeys, pkeyList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] Libssh2PublickeyList** pkeyList)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (uint* pnumKeys = &numKeys)
				{
					int ret = PublickeyListFetchNative((Libssh2Publickey*)ppkey, (uint*)pnumKeys, pkeyList);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] ref Libssh2PublickeyList* pkeyList)
		{
			fixed (Libssh2PublickeyList** ppkeyList = &pkeyList)
			{
				int ret = PublickeyListFetchNative(pkey, numKeys, (Libssh2PublickeyList**)ppkeyList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] uint* numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] ref Libssh2PublickeyList* pkeyList)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (Libssh2PublickeyList** ppkeyList = &pkeyList)
				{
					int ret = PublickeyListFetchNative((Libssh2Publickey*)ppkey, numKeys, (Libssh2PublickeyList**)ppkeyList);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] ref Libssh2PublickeyList* pkeyList)
		{
			fixed (uint* pnumKeys = &numKeys)
			{
				fixed (Libssh2PublickeyList** ppkeyList = &pkeyList)
				{
					int ret = PublickeyListFetchNative(pkey, (uint*)pnumKeys, (Libssh2PublickeyList**)ppkeyList);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_fetch")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyListFetch([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "num_keys")] [NativeName(NativeNameType.Type, "unsigned int*")] ref uint numKeys, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list**")] ref Libssh2PublickeyList* pkeyList)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (uint* pnumKeys = &numKeys)
				{
					fixed (Libssh2PublickeyList** ppkeyList = &pkeyList)
					{
						int ret = PublickeyListFetchNative((Libssh2Publickey*)ppkey, (uint*)pnumKeys, (Libssh2PublickeyList**)ppkeyList);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		internal static void PublickeyListFreeNative([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list*")] Libssh2PublickeyList* pkeyList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Libssh2Publickey*, Libssh2PublickeyList*, void>)vt[110])(pkey, pkeyList);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)vt[110])((nint)pkey, (nint)pkeyList);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PublickeyListFree([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list*")] Libssh2PublickeyList* pkeyList)
		{
			PublickeyListFreeNative(pkey, pkeyList);
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PublickeyListFree([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list*")] Libssh2PublickeyList* pkeyList)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				PublickeyListFreeNative((Libssh2Publickey*)ppkey, pkeyList);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PublickeyListFree([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list*")] ref Libssh2PublickeyList pkeyList)
		{
			fixed (Libssh2PublickeyList* ppkeyList = &pkeyList)
			{
				PublickeyListFreeNative(pkey, (Libssh2PublickeyList*)ppkeyList);
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_list_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PublickeyListFree([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey, [NativeName(NativeNameType.Param, "pkey_list")] [NativeName(NativeNameType.Type, "libssh2_publickey_list*")] ref Libssh2PublickeyList pkeyList)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				fixed (Libssh2PublickeyList* ppkeyList = &pkeyList)
				{
					PublickeyListFreeNative((Libssh2Publickey*)ppkey, (Libssh2PublickeyList*)ppkeyList);
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_shutdown")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int PublickeyShutdownNative([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Publickey*, int>)vt[111])(pkey);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[111])((nint)pkey);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_shutdown")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyShutdown([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] Libssh2Publickey* pkey)
		{
			int ret = PublickeyShutdownNative(pkey);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_publickey_shutdown")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PublickeyShutdown([NativeName(NativeNameType.Param, "pkey")] [NativeName(NativeNameType.Type, "LIBSSH2_PUBLICKEY*")] ref Libssh2Publickey pkey)
		{
			fixed (Libssh2Publickey* ppkey = &pkey)
			{
				int ret = PublickeyShutdownNative((Libssh2Publickey*)ppkey);
				return ret;
			}
		}

		/// <summary>
		/// SFTP API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")]
		internal static Libssh2Sftp* SftpInitNative([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Session*, Libssh2Sftp*>)vt[112])(session);
			#else
			return (Libssh2Sftp*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[112])((nint)session);
			#endif
		}

		/// <summary>
		/// SFTP API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")]
		public static Libssh2Sftp* SftpInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session)
		{
			Libssh2Sftp* ret = SftpInitNative(session);
			return ret;
		}

		/// <summary>
		/// SFTP API <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_init")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")]
		public static Libssh2Sftp* SftpInit([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] ref Libssh2Session session)
		{
			fixed (Libssh2Session* psession = &session)
			{
				Libssh2Sftp* ret = SftpInitNative((Libssh2Session*)psession);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_shutdown")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpShutdownNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, int>)vt[113])(sftp);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)vt[113])((nint)sftp);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_shutdown")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpShutdown([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp)
		{
			int ret = SftpShutdownNative(sftp);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_shutdown")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpShutdown([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				int ret = SftpShutdownNative((Libssh2Sftp*)psftp);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_last_error")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		internal static uint SftpLastErrorNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, uint>)vt[114])(sftp);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)vt[114])((nint)sftp);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_last_error")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SftpLastError([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp)
		{
			uint ret = SftpLastErrorNative(sftp);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_last_error")]
		[return: NativeName(NativeNameType.Type, "unsigned int")]
		public static uint SftpLastError([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				uint ret = SftpLastErrorNative((Libssh2Sftp*)psftp);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_get_channel")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		internal static Libssh2Channel* SftpGetChannelNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, Libssh2Channel*>)vt[115])(sftp);
			#else
			return (Libssh2Channel*)((delegate* unmanaged[Cdecl]<nint, nint>)vt[115])((nint)sftp);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_get_channel")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* SftpGetChannel([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp)
		{
			Libssh2Channel* ret = SftpGetChannelNative(sftp);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_get_channel")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_CHANNEL*")]
		public static Libssh2Channel* SftpGetChannel([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				Libssh2Channel* ret = SftpGetChannelNative((Libssh2Sftp*)psftp);
				return ret;
			}
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		internal static Libssh2SftpHandle* SftpOpenExNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, uint, uint, int, int, Libssh2SftpHandle*>)vt[116])(sftp, filename, filenameLen, flags, mode, openType);
			#else
			return (Libssh2SftpHandle*)((delegate* unmanaged[Cdecl]<nint, nint, uint, uint, int, int, nint>)vt[116])((nint)sftp, (nint)filename, filenameLen, flags, mode, openType);
			#endif
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			Libssh2SftpHandle* ret = SftpOpenExNative(sftp, filename, filenameLen, flags, mode, openType);
			return ret;
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				Libssh2SftpHandle* ret = SftpOpenExNative((Libssh2Sftp*)psftp, filename, filenameLen, flags, mode, openType);
				return ret;
			}
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			fixed (byte* pfilename = &filename)
			{
				Libssh2SftpHandle* ret = SftpOpenExNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType);
				return ret;
			}
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			fixed (byte* pfilename = filename)
			{
				Libssh2SftpHandle* ret = SftpOpenExNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType);
				return ret;
			}
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2SftpHandle* ret = SftpOpenExNative(sftp, pStr0, filenameLen, flags, mode, openType);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = &filename)
				{
					Libssh2SftpHandle* ret = SftpOpenExNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType);
					return ret;
				}
			}
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = filename)
				{
					Libssh2SftpHandle* ret = SftpOpenExNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType);
					return ret;
				}
			}
		}

		/// <summary>
		/// File / Directory Ops <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenEx([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "unsigned int")] uint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2SftpHandle* ret = SftpOpenExNative((Libssh2Sftp*)psftp, pStr0, filenameLen, flags, mode, openType);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		internal static Libssh2SftpHandle* SftpOpenExRNative([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2Sftp*, byte*, ulong, uint, int, int, Libssh2SftpAttributes*, Libssh2SftpHandle*>)vt[117])(sftp, filename, filenameLen, flags, mode, openType, attrs);
			#else
			return (Libssh2SftpHandle*)((delegate* unmanaged[Cdecl]<nint, nint, ulong, uint, int, int, nint, nint>)vt[117])((nint)sftp, (nint)filename, filenameLen, flags, mode, openType, (nint)attrs);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, filename, filenameLen, flags, mode, openType, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, filename, filenameLen, flags, mode, openType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pfilename = &filename)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pfilename = filename)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, pStr0, filenameLen, flags, mode, openType, attrs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = &filename)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = filename)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, pStr0, filenameLen, flags, mode, openType, attrs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, filename, filenameLen, flags, mode, openType, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, filename, filenameLen, flags, mode, openType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pfilename = &filename)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pfilename = filename)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, pStr0, filenameLen, flags, mode, openType, attrs);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = &filename)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = filename)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, pStr0, filenameLen, flags, mode, openType, attrs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, filename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, filename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, pStr0, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] ulong filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, pStr0, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, filename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] byte* filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, filename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pfilename = &filename)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pfilename = filename)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] Libssh2Sftp* sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (filename != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(filename);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				Libssh2SftpHandle* ret = SftpOpenExRNative(sftp, pStr0, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ref byte filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = &filename)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				fixed (byte* pfilename = filename)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, (byte*)pfilename, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_open_ex_r")]
		[return: NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")]
		public static Libssh2SftpHandle* SftpOpenExR([NativeName(NativeNameType.Param, "sftp")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP*")] ref Libssh2Sftp sftp, [NativeName(NativeNameType.Param, "filename")] [NativeName(NativeNameType.Type, "const char*")] string filename, [NativeName(NativeNameType.Param, "filename_len")] [NativeName(NativeNameType.Type, "size_t")] nuint filenameLen, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "unsigned int")] uint flags, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "int")] int mode, [NativeName(NativeNameType.Param, "open_type")] [NativeName(NativeNameType.Type, "int")] int openType, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2Sftp* psftp = &sftp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (filename != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(filename);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(filename, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					Libssh2SftpHandle* ret = SftpOpenExRNative((Libssh2Sftp*)psftp, pStr0, filenameLen, flags, mode, openType, (Libssh2SftpAttributes*)pattrs);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		internal static nint SftpReadNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, byte*, ulong, nint>)vt[118])(handle, buffer, bufferMaxlen);
			#else
			return (nint)((delegate* unmanaged[Cdecl]<nint, nint, ulong, nint>)vt[118])((nint)handle, (nint)buffer, bufferMaxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			nint ret = SftpReadNative(handle, buffer, bufferMaxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				nint ret = SftpReadNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				nint ret = SftpReadNative(handle, (byte*)pbuffer, bufferMaxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = SftpReadNative(handle, pStr0, bufferMaxlen);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					nint ret = SftpReadNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = SftpReadNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen)
		{
			nint ret = SftpReadNative(handle, buffer, bufferMaxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				nint ret = SftpReadNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen)
		{
			fixed (byte* pbuffer = &buffer)
			{
				nint ret = SftpReadNative(handle, (byte*)pbuffer, bufferMaxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nint ret = SftpReadNative(handle, pStr0, bufferMaxlen);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					nint ret = SftpReadNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_read")]
		[return: NativeName(NativeNameType.Type, "ssize_t")]
		public static nint SftpRead([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				nint ret = SftpReadNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		internal static int SftpReaddirExNative([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Libssh2SftpHandle*, byte*, ulong, byte*, ulong, Libssh2SftpAttributes*, int>)vt[119])(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, ulong, nint, ulong, nint, int>)vt[119])((nint)handle, (nint)buffer, bufferMaxlen, (nint)longentry, longentryMaxlen, (nint)attrs);
			#endif
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr1);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr1);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, attrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr1);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
			longentry = Utils.DecodeStringUTF8(pStr1);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, attrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] Libssh2SftpAttributes* attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, attrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						fixed (Libssh2SftpAttributes* pattrs = &attrs)
						{
							int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr1);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* plongentry = &longentry)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (longentry != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (longentry != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(longentry, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, pStr0, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (byte* plongentry = &longentry)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (longentry != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(longentry);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				longentry = Utils.DecodeStringUTF8(pStr1);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref byte longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (byte* plongentry = &longentry)
					{
						fixed (Libssh2SftpAttributes* pattrs = &attrs)
						{
							int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, (byte*)plongentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] ref string longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (longentry != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(longentry);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(longentry, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, pStr1, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					longentry = Utils.DecodeStringUTF8(pStr1);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr1);
					}
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] ulong bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (buffer != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(buffer);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					buffer = Utils.DecodeStringUTF8(pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] byte* buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, buffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (byte* pbuffer = &buffer)
			{
				fixed (Libssh2SftpAttributes* pattrs = &attrs)
				{
					int ret = SftpReaddirExNative(handle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] Libssh2SftpHandle* handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref string buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Libssh2SftpAttributes* pattrs = &attrs)
			{
				int ret = SftpReaddirExNative(handle, pStr0, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
				buffer = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "libssh2_sftp_readdir_ex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SftpReaddirEx([NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_HANDLE*")] ref Libssh2SftpHandle handle, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "char*")] ref byte buffer, [NativeName(NativeNameType.Param, "buffer_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint bufferMaxlen, [NativeName(NativeNameType.Param, "longentry")] [NativeName(NativeNameType.Type, "char*")] byte* longentry, [NativeName(NativeNameType.Param, "longentry_maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint longentryMaxlen, [NativeName(NativeNameType.Param, "attrs")] [NativeName(NativeNameType.Type, "LIBSSH2_SFTP_ATTRIBUTES*")] ref Libssh2SftpAttributes attrs)
		{
			fixed (Libssh2SftpHandle* phandle = &handle)
			{
				fixed (byte* pbuffer = &buffer)
				{
					fixed (Libssh2SftpAttributes* pattrs = &attrs)
					{
						int ret = SftpReaddirExNative((Libssh2SftpHandle*)phandle, (byte*)pbuffer, bufferMaxlen, longentry, longentryMaxlen, (Libssh2SftpAttributes*)pattrs);
						return ret;
					}
				}
			}
		}
	}
}
