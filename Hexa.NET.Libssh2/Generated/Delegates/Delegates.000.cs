// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.Libssh2
{
	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "sign_callback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SignCallback([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* session, [NativeName(NativeNameType.Param, "sig_info")] [NativeName(NativeNameType.Type, "LIBSSH2_SK_SIG_INFO*")] Libssh2SkSigInfo* sigInfo, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "algorithm")] [NativeName(NativeNameType.Type, "int")] int algorithm, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags, [NativeName(NativeNameType.Param, "application")] [NativeName(NativeNameType.Type, "const char*")] byte* application, [NativeName(NativeNameType.Param, "key_handle")] [NativeName(NativeNameType.Type, "const unsigned char*")] byte* keyHandle, [NativeName(NativeNameType.Param, "handle_len")] [NativeName(NativeNameType.Type, "size_t")] ulong handleLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] void** @abstract);

	#else
	[NativeName(NativeNameType.Delegate, "sign_callback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SignCallback([NativeName(NativeNameType.Param, "session")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] nint session, [NativeName(NativeNameType.Param, "sig_info")] [NativeName(NativeNameType.Type, "LIBSSH2_SK_SIG_INFO*")] nint sigInfo, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const unsigned char*")] nint data, [NativeName(NativeNameType.Param, "data_len")] [NativeName(NativeNameType.Type, "size_t")] ulong dataLen, [NativeName(NativeNameType.Param, "algorithm")] [NativeName(NativeNameType.Type, "int")] int algorithm, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "uint8_t")] byte flags, [NativeName(NativeNameType.Param, "application")] [NativeName(NativeNameType.Type, "const char*")] nint application, [NativeName(NativeNameType.Param, "key_handle")] [NativeName(NativeNameType.Type, "const unsigned char*")] nint keyHandle, [NativeName(NativeNameType.Param, "handle_len")] [NativeName(NativeNameType.Type, "size_t")] ulong handleLen, [NativeName(NativeNameType.Param, "abstract")] [NativeName(NativeNameType.Type, "void**")] nint @abstract);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "libssh2_trace_handler_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Libssh2TraceHandlerFunc([NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] Libssh2Session* unknown0, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "void*")] void* unknown1, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "const char*")] byte* unknown2, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "size_t")] ulong unknown3);

	#else
	[NativeName(NativeNameType.Delegate, "libssh2_trace_handler_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Libssh2TraceHandlerFunc([NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "LIBSSH2_SESSION*")] nint unknown0, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "void*")] nint unknown1, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "const char*")] nint unknown2, [NativeName(NativeNameType.Param, "")] [NativeName(NativeNameType.Type, "size_t")] ulong unknown3);

	#endif

}
